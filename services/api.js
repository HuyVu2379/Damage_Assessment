// --- API Keys (S·ª≠ d·ª•ng bi·∫øn m√¥i tr∆∞·ªùng) ---
// API keys ƒë∆∞·ª£c l∆∞u tr·ªØ trong file .env (kh√¥ng ƒë∆∞·ª£c commit l√™n git)
import { GROQ_API_KEY, GEMINI_API_KEY } from '@env';
import * as FileSystem from 'expo-file-system';

// Import optimized logger
const log = __DEV__ ? console.log : () => {};
const error = __DEV__ ? console.error : () => {};

const DAMAGE_ANALYSIS_PROMPT = `
B·∫°n l√† k·ªπ s∆∞ x√¢y d·ª±ng v·ªõi 15 nƒÉm kinh nghi·ªám. Ph√¢n t√≠ch ·∫£nh n√†y theo 4 m·ª•c c·ª• th·ªÉ b√™n d∆∞·ªõi.

‚ö†Ô∏è QUY T·∫ÆC TR·∫¢ L·ªúI:
- Tr·∫£ l·ªùi c·ª±c ng·∫Øn g·ªçn, m·ªói ph·∫ßn d∆∞·ªõi 4 d√≤ng
- Kh√¥ng v√≤ng vo, kh√¥ng ƒë·ªãnh nghƒ©a thu·∫≠t ng·ªØ
- T·∫≠p trung v√†o ch·∫©n ƒëo√°n, gi·∫£i ph√°p, s·∫£n ph·∫©m
- G·ª£i √Ω th·ª±c t·∫ø v√† d·ªÖ √°p d·ª•ng t·∫°i Vi·ªát Nam

----------------------------
1. NH·∫¨N DI·ªÜN V·∫§N ƒê·ªÄ:
‚Ä¢ Lo·∫°i h∆∞ h·∫°i: (1 d√≤ng)
‚Ä¢ V·ªã tr√≠: (1 d√≤ng)
‚Ä¢ K√≠ch th∆∞·ªõc v√† m·ª©c ƒë·ªô: (1 d√≤ng)

2. NGUY√äN NH√ÇN:
‚Ä¢ Nguy√™n nh√¢n ch√≠nh: (1 d√≤ng)
‚Ä¢ D·∫•u hi·ªáu nh·∫≠n bi·∫øt: (1 d√≤ng)

3. C√ÅCH X·ª¨ L√ù:
‚Ä¢ B∆∞·ªõc 1: (1 d√≤ng)
‚Ä¢ B∆∞·ªõc 2: (1 d√≤ng)
‚Ä¢ B∆∞·ªõc 3: (1 d√≤ng)
‚Ä¢ L∆∞u √Ω: (n·∫øu c√≥)

4. G·ª¢I √ù S·∫¢N PH·∫®M:
‚Ä¢ G·ª£i √Ω 2‚Äì3 s·∫£n ph·∫©m c·ª• th·ªÉ t·∫°i VN (t√™n + link + m√¥ t·∫£)

üéØ K·∫æT TH√öC b·∫±ng block JSON ch·ª©a s·∫£n ph·∫©m nh∆∞ sau:
\`\`\`json
{
  "products": [
    {
      "name": "T√™n s·∫£n ph·∫©m",
      "brand": "Th∆∞∆°ng hi·ªáu", 
      "description": "M√¥ t·∫£",
      "estimatedPrice": "Gi√° ~ VND",
      "purchaseLink": "Link Tiki/Lazada/Shopee",
      "imageUrl": "URL ·∫£nh",
      "category": "Danh m·ª•c"
    }
  ]
}
\`\`\`

KH√îNG vi·∫øt th·ª´a, KH√îNG vi·∫øt ngo√†i format. Tr·∫£ l·ªùi NG·∫ÆN G·ªåN, S√ÅT TH·ª∞C T·∫æ.`;


const GENERAL_CHAT_PROMPT = `
B·∫°n l√† chuy√™n gia x√¢y d·ª±ng th√¢n thi·ªán, 15 nƒÉm kinh nghi·ªám th·ª±c t·∫ø t·∫°i Vi·ªát Nam.

üåü QUY T·∫ÆC TR·∫¢ L·ªúI:
- Ng·∫Øn g·ªçn, d·ªÖ hi·ªÉu, kh√¥ng d√πng thu·∫≠t ng·ªØ chuy√™n s√¢u
- Tr·∫£ l·ªùi trong 3 ƒëo·∫°n ng·∫Øn (t·ªëi ƒëa 50‚Äì80 t·ª´ m·ªói ƒëo·∫°n)
- ∆Øu ti√™n chia s·∫ª gi·∫£i ph√°p th·ª±c t·∫ø h∆°n l√† l√Ω thuy·∫øt
- C√≥ th·ªÉ h·ªèi l·∫°i n·∫øu thi·∫øu th√¥ng tin

üìå B·∫†N C√ì TH·ªÇ:
- T∆∞ v·∫•n s·ª≠a ch·ªØa, c·∫£i t·∫°o nh√† ·ªü, v·∫≠t li·ªáu
- H∆∞·ªõng d·∫´n x·ª≠ l√Ω h∆∞ h·∫°i c∆° b·∫£n
- G·ª£i √Ω v·∫≠t t∆∞ ph√π h·ª£p t·∫°i Vi·ªát Nam (n·∫øu c√≥)

V√≠ d·ª• c√¢u tr·∫£ l·ªùi:
1. N√™u t√¨nh tr·∫°ng/gi·∫£i ph√°p ng·∫Øn g·ªçn
2. G·ª£i √Ω c√°ch x·ª≠ l√Ω ho·∫∑c v·∫≠t li·ªáu
3. L∆∞u √Ω an to√†n, th·ªùi gian, ho·∫∑c m·∫πo nh·ªè

KH√îNG n√≥i v√≤ng vo. KH√îNG c·∫ßn gi·ªõi thi·ªáu l·∫°i b·∫£n th√¢n. Lu√¥n ƒëi th·∫≥ng v√†o n·ªôi dung.
`;

const API_CONFIG = {
    groq: {
        endpoint: 'https://api.groq.com/openai/v1/chat/completions',
        apiKey: GROQ_API_KEY,
        model: 'llama3-70b-8192',
    },
    gemini: {
        endpoint: `https://generativelanguage.googleapis.com/v1beta/models/gemini-2.0-flash:generateContent?key=${GEMINI_API_KEY}`,
        apiKey: GEMINI_API_KEY,
    }
};

/**
 * L·∫•y ph·∫£n h·ªìi t·ª´ model AI ƒë∆∞·ª£c ch·ªçn
 * @param {Array} messageHistory L·ªãch s·ª≠ cu·ªôc tr√≤ chuy·ªán (ch·ªâ ch·ª©a role 'user' v√† 'assistant')
 * @param {'groq' | 'gemini'} modelType Lo·∫°i model ƒë·ªÉ s·ª≠ d·ª•ng
 * @param {boolean} isDamageAnalysis C√≥ ph·∫£i l√† ph√¢n t√≠ch h∆∞ h·ªèng (c√≥ ·∫£nh) hay kh√¥ng
 * @returns {Promise<string>} N·ªôi dung ph·∫£n h·ªìi t·ª´ AI (bao g·ªìm JSON block n·∫øu l√† ph√¢n t√≠ch h∆∞ h·ªèng)
 */
export const getAiResponse = async (messageHistory, modelType, isDamageAnalysis = false) => {
    const config = API_CONFIG[modelType];
    if (!config) {
        return "L·ªói: Model kh√¥ng ƒë∆∞·ª£c h·ªó tr·ª£.";
    }

    // Ch·ªçn prompt ph√π h·ª£p d·ª±a tr√™n lo·∫°i tin nh·∫Øn
    const selectedPrompt = isDamageAnalysis ? DAMAGE_ANALYSIS_PROMPT : GENERAL_CHAT_PROMPT;

    let headers = { 'Content-Type': 'application/json' };
    let body;

    if (modelType === 'groq') {
        headers['Authorization'] = `Bearer ${config.apiKey}`;

        const messagesWithSystemPrompt = [
            { role: 'system', content: selectedPrompt },
            ...messageHistory
        ];

        body = JSON.stringify({
            model: config.model,
            messages: messagesWithSystemPrompt,
            max_tokens: isDamageAnalysis ? 2500 : 1500,
        });
    } else if (modelType === 'gemini') {
        const contents = messageHistory.map(msg => ({
            role: msg.role === 'assistant' ? 'model' : msg.role,
            parts: [{ text: msg.content }],
        }));

        const systemInstruction = {
            parts: [{ text: selectedPrompt }]
        };

        body = JSON.stringify({
            contents,
            systemInstruction
        });
    }

    try {
        const response = await fetch(config.endpoint, {
            method: 'POST',
            headers: headers,
            body: body,
        });

        if (!response.ok) {
            const errorData = await response.json();
            throw new Error(`L·ªói API: ${errorData.error?.message || 'Unknown error'}`);
        }

        const data = await response.json();

        let aiMessage;
        if (modelType === 'groq') {
            aiMessage = data.choices[0]?.message?.content?.trim();
        } else if (modelType === 'gemini') {
            aiMessage = data.candidates[0]?.content?.parts[0]?.text?.trim();
        }

        if (!aiMessage) {
            throw new Error("Kh√¥ng nh·∫≠n ƒë∆∞·ª£c n·ªôi dung h·ª£p l·ªá t·ª´ AI.");
        }

        return aiMessage;

    } catch (error) {
        error(`L·ªói khi g·ªçi API ${modelType}:`, error);
        return `Xin l·ªói, ƒë√£ c√≥ l·ªói x·∫£y ra khi k·∫øt n·ªëi ƒë·∫øn ${modelType}.`;
    }
};

/**
 * Tr√≠ch xu·∫•t th√¥ng tin s·∫£n ph·∫©m t·ª´ ph·∫£n h·ªìi AI
 * @param {string} aiResponse Ph·∫£n h·ªìi t·ª´ AI
 * @returns {Object} ƒê·ªëi t∆∞·ª£ng ch·ª©a n·ªôi dung ph√¢n t√≠ch v√† danh s√°ch s·∫£n ph·∫©m
 */
export const parseProductSuggestions = (aiResponse) => {
    // Lo·∫°i b·ªè t·∫•t c·∫£ console.log ƒë·ªÉ gi·∫£m lag terminal
    
    try {
        // T√¨m JSON block trong ph·∫£n h·ªìi
        const jsonMatch = aiResponse.match(/```json\s*([\s\S]*?)\s*```/);

        if (jsonMatch && jsonMatch[1]) {
            const productData = JSON.parse(jsonMatch[1]);

            // T√°ch n·ªôi dung ph√¢n t√≠ch (lo·∫°i b·ªè JSON block)
            const analysisContent = aiResponse.replace(/```json\s*[\s\S]*?\s*```/, '').trim();

            const result = {
                analysis: analysisContent,
                products: productData.products || []
            };

            return result;
        }
    } catch (error) {
        // Ch·ªâ log l·ªói nghi√™m tr·ªçng
        if (__DEV__) {
            error('Parse s·∫£n ph·∫©m l·ªói:', error.message);
        }
    }

    // N·∫øu kh√¥ng c√≥ JSON ho·∫∑c l·ªói, tr·∫£ v·ªÅ ph·∫£n h·ªìi nguy√™n b·∫£n
    return {
        analysis: aiResponse,
        products: []
    };
};

/**
 * Validate v√† format d·ªØ li·ªáu s·∫£n ph·∫©m
 * @param {Array} products Danh s√°ch s·∫£n ph·∫©m
 * @returns {Array} Danh s√°ch s·∫£n ph·∫©m ƒë√£ ƒë∆∞·ª£c validate v√† format
 */
export const validateProductData = (products) => {
    // Lo·∫°i b·ªè console.log ƒë·ªÉ gi·∫£m lag terminal
    
    if (!Array.isArray(products)) {
        return [];
    }

    const validatedProducts = products.map(product => ({
        name: product.name || 'Kh√¥ng c√≥ t√™n',
        brand: product.brand || 'Kh√¥ng r√µ th∆∞∆°ng hi·ªáu',
        description: product.description || 'Kh√¥ng c√≥ m√¥ t·∫£',
        estimatedPrice: product.estimatedPrice || 'Li√™n h·ªá ƒë·ªÉ bi·∫øt gi√°',
        purchaseLink: validateUrl(product.purchaseLink) || '#',
        imageUrl: validateImageUrl(product.imageUrl) || 'https://via.placeholder.com/150x150?text=No+Image',
        category: product.category || 'Kh√°c'
    }));

    return validatedProducts;
};

/**
 * Validate URL s·∫£n ph·∫©m
 * @param {string} url URL c·∫ßn validate
 * @returns {string|null} URL h·ª£p l·ªá ho·∫∑c null
 */
const validateUrl = (url) => {
    if (!url || typeof url !== 'string') return null;

    const validDomains = ['shopee.vn', 'lazada.vn', 'tiki.vn', 'sendo.vn'];
    try {
        const parsedUrl = new URL(url);
        return validDomains.some(domain => parsedUrl.hostname.includes(domain)) ? url : null;
    } catch {
        return null;
    }
};

/**
 * Validate URL h√¨nh ·∫£nh
 * @param {string} imageUrl URL h√¨nh ·∫£nh c·∫ßn validate
 * @returns {string|null} URL h√¨nh ·∫£nh h·ª£p l·ªá ho·∫∑c null
 */
const validateImageUrl = (imageUrl) => {
    if (!imageUrl || typeof imageUrl !== 'string') return null;

    const validImageDomains = [
        'cf.shopee.vn',
        'salt.tikicdn.com',
        'laz-img-cdn.alicdn.com',
        'media3.scdn.vn'
    ];

    const validExtensions = ['.jpg', '.jpeg', '.png', '.webp'];

    try {
        const parsedUrl = new URL(imageUrl);
        const hasValidDomain = validImageDomains.some(domain => parsedUrl.hostname.includes(domain));
        const hasValidExtension = validExtensions.some(ext =>
            parsedUrl.pathname.toLowerCase().includes(ext)
        );

        return hasValidDomain && hasValidExtension ? imageUrl : null;
    } catch {
        return null;
    }
};

/**
 * Convert ·∫£nh sang Base64
 * @param {string} uri URI c·ªßa ·∫£nh
 * @returns {Promise<string>} Base64 string
 */
export const convertImageToBase64 = async (uri) => {
    try {
        const base64 = await FileSystem.readAsStringAsync(uri, {
            encoding: FileSystem.EncodingType.Base64,
        });
        return base64;
    } catch (error) {
        throw new Error(`Kh√¥ng th·ªÉ convert ·∫£nh sang Base64: ${error.message}`);
    }
};

/**
 * Ph√¢n t√≠ch ·∫£nh v·ªõi Gemini Vision
 * @param {string} imageBase64 ·∫¢nh Base64
 * @param {string} prompt Prompt ph√¢n t√≠ch
 * @returns {Promise<string>} K·∫øt qu·∫£ ph√¢n t√≠ch
 */
export const analyzeImageWithGemini = async (imageBase64, prompt = DAMAGE_ANALYSIS_PROMPT) => {
    const endpoint = `https://generativelanguage.googleapis.com/v1beta/models/gemini-1.5-flash:generateContent?key=${GEMINI_API_KEY}`;
    
    try {
        // Lo·∫°i b·ªè prefix n·∫øu c√≥
        const base64Data = imageBase64.replace(/^data:image\/[a-z]+;base64,/, '');
        
        const body = JSON.stringify({
            contents: [{
                parts: [
                    { text: prompt },
                    {
                        inline_data: {
                            mime_type: "image/jpeg",
                            data: base64Data
                        }
                    }
                ]
            }]
        });

        const response = await fetch(endpoint, {
            method: 'POST',
            headers: { 'Content-Type': 'application/json' },
            body: body
        });

        if (!response.ok) {
            const errorData = await response.json();
            throw new Error(`L·ªói API Gemini Vision: ${errorData.error?.message || 'Unknown error'}`);
        }

        const data = await response.json();
        const aiMessage = data.candidates[0]?.content?.parts[0]?.text?.trim();

        if (!aiMessage) {
            throw new Error("Kh√¥ng nh·∫≠n ƒë∆∞·ª£c n·ªôi dung h·ª£p l·ªá t·ª´ Gemini Vision.");
        }

        return aiMessage;
    } catch (error) {
        return `Xin l·ªói, ƒë√£ c√≥ l·ªói x·∫£y ra khi ph√¢n t√≠ch ·∫£nh: ${error.message}`;
    }
};