// --- API Keys (S·ª≠ d·ª•ng bi·∫øn m√¥i tr∆∞·ªùng) ---
// API keys ƒë∆∞·ª£c l∆∞u tr·ªØ trong file .env (kh√¥ng ƒë∆∞·ª£c commit l√™n git)
const GROQ_API_KEY = ""
const GEMINI_API_KEY = ""

const DAMAGE_ANALYSIS_PROMPT = `T√¥i s·∫Ω cung c·∫•p h√¨nh ·∫£nh m·ªôt v·ªã tr√≠ h∆∞ h·∫°i trong c√¥ng tr√¨nh x√¢y d·ª±ng (nh√† d√¢n d·ª•ng ho·∫∑c c√¥ng tr√¨nh nh·ªè).

H√£y ph√¢n t√≠ch k·ªπ h√¨nh ·∫£nh n√†y v√† tr·∫£ l·ªùi th·∫≠t chi ti·∫øt, k·ªπ thu·∫≠t, theo ƒë√∫ng 5 n·ªôi dung sau:


1. Lo·∫°i h∆∞ h·∫°i:
 ‚Ä¢ ƒê√¢y l√† lo·∫°i h∆∞ h·∫°i g√¨ (n·ª©t, th·∫•m, bong tr√≥c, m·ªëc, v√µng tr·∫ßn, v·ª° g·∫°ch, x√™ d·ªãch k·∫øt c·∫•u,‚Ä¶)?
 ‚Ä¢ M√¥ t·∫£ h√¨nh d·∫°ng, k√≠ch th∆∞·ªõc, h∆∞·ªõng ph√°t tri·ªÉn c·ªßa v·∫øt n·ª©t/h∆∞ h·∫°i ƒë√≥.
 ‚Ä¢ C√≥ d·∫•u hi·ªáu g√¨ cho th·∫•y h∆∞ h·∫°i n√†y ƒëang ti·∫øp t·ª•c ph√°t tri·ªÉn hay kh√¥ng?

2. V·ªã tr√≠ v√† lo·∫°i c·∫•u ki·ªán b·ªã ·∫£nh h∆∞·ªüng:
 ‚Ä¢ ƒê√¢y l√† t∆∞·ªùng trong, t∆∞·ªùng ngo√†i, tr·∫ßn, s√†n, m√≥ng,‚Ä¶?
 ‚Ä¢ C√≥ kh·∫£ nƒÉng l√† t∆∞·ªùng ch·ªãu l·ª±c hay kh√¥ng?
 ‚Ä¢ C√≥ nguy c∆° ·∫£nh h∆∞·ªüng k·∫øt c·∫•u hay ch·ªâ ·∫£nh h∆∞·ªüng th·∫©m m·ªπ?


3. M·ª©c ƒë·ªô h∆∞ h·∫°i:
 ‚Ä¢ Ph√¢n lo·∫°i m·ª©c ƒë·ªô: Nh·∫π / Trung b√¨nh / N·∫∑ng.
 ‚Ä¢ N√™u r√µ l√Ω do t·∫°i sao ph√¢n lo·∫°i nh∆∞ v·∫≠y.
 ‚Ä¢ N·∫øu c√≥ nguy c∆° m·∫•t an to√†n c√¥ng tr√¨nh, h√£y n√™u r√µ c·∫£nh b√°o.


4. Nguy√™n nh√¢n ti·ªÅm ·∫©n:
 ‚Ä¢ D·ª± ƒëo√°n c√°c nguy√™n nh√¢n k·ªπ thu·∫≠t c√≥ th·ªÉ g√¢y ra t√¨nh tr·∫°ng n√†y.
 ‚Ä¢ N·∫øu c√≥ th·ªÉ, ph√¢n nh√≥m nguy√™n nh√¢n: do thi c√¥ng ‚Äì do v·∫≠t li·ªáu ‚Äì do m√¥i tr∆∞·ªùng ‚Äì do n·ªÅn m√≥ng ‚Äì do t·∫£i tr·ªçng.
 ‚Ä¢ N√™u r√µ d·∫•u hi·ªáu n√†o trong ·∫£nh khi·∫øn b·∫°n nghi ng·ªù nguy√™n nh√¢n ƒë√≥.


5. H∆∞·ªõng d·∫´n x·ª≠ l√Ω v√† s·ª≠a ch·ªØa:
 ‚Ä¢ M√¥ t·∫£ t·ª´ng b∆∞·ªõc x·ª≠ l√Ω chi ti·∫øt, theo tr√¨nh t·ª± th·ª±c t·∫ø ngo√†i c√¥ng tr√¨nh.
 ‚Ä¢ G·ª£i √Ω v·∫≠t li·ªáu v√† ph∆∞∆°ng ph√°p ph√π h·ª£p: keo tr√°m, v·ªØa, s∆°n ch·ªëng th·∫•m, epoxy,‚Ä¶
 ‚Ä¢ N·∫øu c√≥ nhi·ªÅu ph∆∞∆°ng √°n, h√£y li·ªát k√™ ∆∞u ‚Äì nh∆∞·ª£c ƒëi·ªÉm ng·∫Øn g·ªçn.
 ‚Ä¢ ƒê∆∞a ra khuy·∫øn ngh·ªã c√≥ n√™n g·ªçi k·ªπ s∆∞ chuy√™n m√¥n ƒë·∫øn ki·ªÉm tra hi·ªán tr∆∞·ªùng kh√¥ng.


Tr√¨nh b√†y d∆∞·ªõi d·∫°ng c√°c ti√™u ƒë·ªÅ r√µ r√†ng, d·ªÖ hi·ªÉu, nh∆∞ m·ªôt b√°o c√°o ƒë√°nh gi√° hi·ªán tr·∫°ng k·ªπ thu·∫≠t.
Tr√°nh d√πng thu·∫≠t ng·ªØ qu√° ph·ª©c t·∫°p tr·ª´ khi c·∫ßn thi·∫øt.


üìù Ghi ch√∫:

B·∫°n c√≥ th·ªÉ th√™m ph·∫ßn m·ªü ƒë·∫ßu nh∆∞ sau n·∫øu c·∫ßn c·ª• th·ªÉ h√≥a th√™m b·ªëi c·∫£nh:

 ‚Ä¢ ƒê√¢y l√† c√¥ng tr√¨nh nh√† ·ªü d√¢n d·ª•ng, tu·ªïi ƒë·ªùi 10 nƒÉm, n·ªÅn ƒë·∫•t y·∫øu.
 ‚Ä¢ V·∫øt n·ª©t n·∫±m g·∫ßn nh√† t·∫Øm ho·∫∑c c·ª≠a s·ªï, c√≥ d·∫•u hi·ªáu b·ªã ·∫©m k√©o d√†i.
 ‚Ä¢ T√¥i nghi ng·ªù c√≥ l√∫n n·ªÅn ho·∫∑c th·∫•m n∆∞·ªõc t·ª´ ph√≤ng t·∫Øm.`;




const GENERAL_CHAT_PROMPT = `B·∫°n l√† tr·ª£ l√Ω AI th√¥ng minh v√† h·ªØu √≠ch chuy√™n v·ªÅ x√¢y d·ª±ng v√† b·∫£o tr√¨ c√¥ng tr√¨nh.

**Quy t·∫Øc quan tr·ªçng: To√†n b·ªô ph·∫£n h·ªìi c·ªßa b·∫°n PH·∫¢I b·∫±ng ti·∫øng Vi·ªát.**

B·∫°n c√≥ th·ªÉ h·ªó tr·ª£ ng∆∞·ªùi d√πng v·ªõi:
- C√¢u h·ªèi chung v·ªÅ x√¢y d·ª±ng v√† ki·∫øn tr√∫c
- T∆∞ v·∫•n b·∫£o tr√¨ v√† b·∫£o d∆∞·ª°ng c√¥ng tr√¨nh
- G·ª£i √Ω v·ªÅ v·∫≠t li·ªáu x√¢y d·ª±ng
- K·ªπ thu·∫≠t thi c√¥ng x√¢y d·ª±ng
- H∆∞·ªõng d·∫´n an to√†n lao ƒë·ªông
- Quy chu·∫©n v√† ti√™u chu·∫©n x√¢y d·ª±ng
- L·∫≠p k·∫ø ho·∫°ch d·ª± √°n x√¢y d·ª±ng
- Gi·∫£i th√≠ch thu·∫≠t ng·ªØ k·ªπ thu·∫≠t

H√£y cung c·∫•p c√¢u tr·∫£ l·ªùi h·ªØu √≠ch, ch√≠nh x√°c v√† chi ti·∫øt b·∫±ng ti·∫øng Vi·ªát. N·∫øu c√¢u h·ªèi kh√¥ng li√™n quan ƒë·∫øn x√¢y d·ª±ng, h√£y l·ªãch s·ª± chuy·ªÉn h∆∞·ªõng cu·ªôc tr√≤ chuy·ªán tr·ªü l·∫°i ch·ªß ƒë·ªÅ x√¢y d·ª±ng.`;

const API_CONFIG = {
    groq: {
        endpoint: 'https://api.groq.com/openai/v1/chat/completions',
        apiKey: GROQ_API_KEY,
        model: 'llama3-70b-8192',
    },
    gemini: {
        endpoint: `https://generativelanguage.googleapis.com/v1beta/models/gemini-2.0-flash:generateContent?key=${GEMINI_API_KEY}`,
        apiKey: GEMINI_API_KEY,
    }
};

/**
 * L·∫•y ph·∫£n h·ªìi t·ª´ model AI ƒë∆∞·ª£c ch·ªçn
 * @param {Array} messageHistory L·ªãch s·ª≠ cu·ªôc tr√≤ chuy·ªán (ch·ªâ ch·ª©a role 'user' v√† 'assistant')
 * @param {'groq' | 'gemini'} modelType Lo·∫°i model ƒë·ªÉ s·ª≠ d·ª•ng
 * @param {boolean} isDamageAnalysis C√≥ ph·∫£i l√† ph√¢n t√≠ch h∆∞ h·ªèng (c√≥ ·∫£nh) hay kh√¥ng
 * @returns {Promise<string>} N·ªôi dung ph·∫£n h·ªìi t·ª´ AI
 */
export const getAiResponse = async (messageHistory, modelType, isDamageAnalysis = false) => {
    const config = API_CONFIG[modelType];
    if (!config) {
        return "L·ªói: Model kh√¥ng ƒë∆∞·ª£c h·ªó tr·ª£.";
    }

    // Ch·ªçn prompt ph√π h·ª£p d·ª±a tr√™n lo·∫°i tin nh·∫Øn
    const selectedPrompt = isDamageAnalysis ? DAMAGE_ANALYSIS_PROMPT : GENERAL_CHAT_PROMPT;

    let headers = { 'Content-Type': 'application/json' };
    let body;

    if (modelType === 'groq') {
        headers['Authorization'] = `Bearer ${config.apiKey}`;

        const messagesWithSystemPrompt = [
            { role: 'system', content: selectedPrompt },
            ...messageHistory
        ];

        body = JSON.stringify({
            model: config.model,
            messages: messagesWithSystemPrompt,
            max_tokens: 1500,
        });
    } else if (modelType === 'gemini') {
        const contents = messageHistory.map(msg => ({
            role: msg.role === 'assistant' ? 'model' : msg.role,
            parts: [{ text: msg.content }],
        }));

        const systemInstruction = {
            parts: [{ text: selectedPrompt }]
        };

        body = JSON.stringify({
            contents,
            systemInstruction
        });
    }

    try {
        const response = await fetch(config.endpoint, {
            method: 'POST',
            headers: headers,
            body: body,
        });

        if (!response.ok) {
            const errorData = await response.json();
            throw new Error(`L·ªói API: ${errorData.error?.message || 'Unknown error'}`);
        }

        const data = await response.json();

        let aiMessage;
        if (modelType === 'groq') {
            aiMessage = data.choices[0]?.message?.content?.trim();
        } else if (modelType === 'gemini') {
            aiMessage = data.candidates[0]?.content?.parts[0]?.text?.trim();
        }

        if (!aiMessage) {
            throw new Error("Kh√¥ng nh·∫≠n ƒë∆∞·ª£c n·ªôi dung h·ª£p l·ªá t·ª´ AI.");
        }

        return aiMessage;

    } catch (error) {
        console.error(`L·ªói khi g·ªçi API ${modelType}:`, error);
        return `Xin l·ªói, ƒë√£ c√≥ l·ªói x·∫£y ra khi k·∫øt n·ªëi ƒë·∫øn ${modelType}.`;
    }
};