// --- API Keys (S·ª≠ d·ª•ng bi·∫øn m√¥i tr∆∞·ªùng) ---
// API keys ƒë∆∞·ª£c l∆∞u tr·ªØ trong file .env (kh√¥ng ƒë∆∞·ª£c commit l√™n git)
import { GROQ_API_KEY, GEMINI_API_KEY } from '@env';
import * as FileSystem from 'expo-file-system';

// SerpAPI Configuration
const SERP_API_KEY = 'd830ed67812fed5d2a72f26fdd84d56334e182e27eb38eb29f3389700484d87a';
const SERP_API_BASE_URL = 'https://serpapi.com/search';

// Import optimized logger
const log = __DEV__ ? console.log : () => {};
const error = __DEV__ ? console.error : () => {};

const DAMAGE_ANALYSIS_PROMPT = `
B·∫°n l√† k·ªπ s∆∞ x√¢y d·ª±ng v·ªõi 15 nƒÉm kinh nghi·ªám. Ph√¢n t√≠ch ·∫£nh n√†y theo 3 m·ª•c:

‚ö†Ô∏è QUY T·∫ÆC TR·∫¢ L·ªúI:
- Tr·∫£ l·ªùi c·ª±c ng·∫Øn g·ªçn, m·ªói ph·∫ßn d∆∞·ªõi 3 d√≤ng
- Kh√¥ng v√≤ng vo, ƒëi th·∫≥ng v√†o v·∫•n ƒë·ªÅ
- T·∫≠p trung v√†o ch·∫©n ƒëo√°n v√† gi·∫£i ph√°p

----------------------------
1. NH·∫¨N DI·ªÜN V·∫§N ƒê·ªÄ:
‚Ä¢ Lo·∫°i h∆∞ h·∫°i + v·ªã tr√≠ + m·ª©c ƒë·ªô (2 d√≤ng)

2. NGUY√äN NH√ÇN:
‚Ä¢ Nguy√™n nh√¢n ch√≠nh + d·∫•u hi·ªáu (2 d√≤ng)

3. C√ÅCH X·ª¨ L√ù:
‚Ä¢ 3 b∆∞·ªõc x·ª≠ l√Ω ng·∫Øn g·ªçn
‚Ä¢ L∆∞u √Ω quan tr·ªçng (n·∫øu c√≥)

K·∫æT TH√öC b·∫±ng danh s√°ch s·∫£n ph·∫©m c·∫ßn d√πng:
"S·∫£n ph·∫©m c·∫ßn: Keo Sikaflex, S∆°n ch·ªëng th·∫•m Nippon, V·∫£i th·ªßy tinh"

KH√îNG vi·∫øt th·ª´a. Tr·∫£ l·ªùi NG·∫ÆN G·ªåN, S√ÅT TH·ª∞C T·∫æ.`;


const GENERAL_CHAT_PROMPT = `
B·∫°n l√† chuy√™n gia x√¢y d·ª±ng th√¢n thi·ªán, 15 nƒÉm kinh nghi·ªám th·ª±c t·∫ø t·∫°i Vi·ªát Nam.

üåü QUY T·∫ÆC TR·∫¢ L·ªúI:
- Ng·∫Øn g·ªçn, d·ªÖ hi·ªÉu, kh√¥ng d√πng thu·∫≠t ng·ªØ chuy√™n s√¢u
- Tr·∫£ l·ªùi trong 3 ƒëo·∫°n ng·∫Øn (t·ªëi ƒëa 50‚Äì80 t·ª´ m·ªói ƒëo·∫°n)
- ∆Øu ti√™n chia s·∫ª gi·∫£i ph√°p th·ª±c t·∫ø h∆°n l√† l√Ω thuy·∫øt
- C√≥ th·ªÉ h·ªèi l·∫°i n·∫øu thi·∫øu th√¥ng tin

üìå B·∫†N C√ì TH·ªÇ:
- T∆∞ v·∫•n s·ª≠a ch·ªØa, c·∫£i t·∫°o nh√† ·ªü, v·∫≠t li·ªáu
- H∆∞·ªõng d·∫´n x·ª≠ l√Ω h∆∞ h·∫°i c∆° b·∫£n
- G·ª£i √Ω v·∫≠t t∆∞ ph√π h·ª£p t·∫°i Vi·ªát Nam (n·∫øu c√≥)

V√≠ d·ª• c√¢u tr·∫£ l·ªùi:
1. N√™u t√¨nh tr·∫°ng/gi·∫£i ph√°p ng·∫Øn g·ªçn
2. G·ª£i √Ω c√°ch x·ª≠ l√Ω ho·∫∑c v·∫≠t li·ªáu
3. L∆∞u √Ω an to√†n, th·ªùi gian, ho·∫∑c m·∫πo nh·ªè

KH√îNG n√≥i v√≤ng vo. KH√îNG c·∫ßn gi·ªõi thi·ªáu l·∫°i b·∫£n th√¢n. Lu√¥n ƒëi th·∫≥ng v√†o n·ªôi dung.
`;

const API_CONFIG = {
    groq: {
        endpoint: 'https://api.groq.com/openai/v1/chat/completions',
        apiKey: GROQ_API_KEY,
        model: 'llama3-70b-8192',
    },
    gemini: {
        endpoint: `https://generativelanguage.googleapis.com/v1beta/models/gemini-2.0-flash:generateContent?key=${GEMINI_API_KEY}`,
        apiKey: GEMINI_API_KEY,
    }
};

/**
 * L·∫•y ph·∫£n h·ªìi t·ª´ model AI ƒë∆∞·ª£c ch·ªçn
 * @param {Array} messageHistory L·ªãch s·ª≠ cu·ªôc tr√≤ chuy·ªán (ch·ªâ ch·ª©a role 'user' v√† 'assistant')
 * @param {'groq' | 'gemini'} modelType Lo·∫°i model ƒë·ªÉ s·ª≠ d·ª•ng
 * @param {boolean} isDamageAnalysis C√≥ ph·∫£i l√† ph√¢n t√≠ch h∆∞ h·ªèng (c√≥ ·∫£nh) hay kh√¥ng
 * @returns {Promise<string>} N·ªôi dung ph·∫£n h·ªìi t·ª´ AI (bao g·ªìm JSON block n·∫øu l√† ph√¢n t√≠ch h∆∞ h·ªèng)
 */
export const getAiResponse = async (messageHistory, modelType, isDamageAnalysis = false) => {
    const config = API_CONFIG[modelType];
    if (!config) {
        return "L·ªói: Model kh√¥ng ƒë∆∞·ª£c h·ªó tr·ª£.";
    }

    // Ch·ªçn prompt ph√π h·ª£p d·ª±a tr√™n lo·∫°i tin nh·∫Øn
    const selectedPrompt = isDamageAnalysis ? DAMAGE_ANALYSIS_PROMPT : GENERAL_CHAT_PROMPT;

    let headers = { 'Content-Type': 'application/json' };
    let body;

    if (modelType === 'groq') {
        headers['Authorization'] = `Bearer ${config.apiKey}`;

        const messagesWithSystemPrompt = [
            { role: 'system', content: selectedPrompt },
            ...messageHistory
        ];

        body = JSON.stringify({
            model: config.model,
            messages: messagesWithSystemPrompt,
            max_tokens: isDamageAnalysis ? 2500 : 1500,
        });
    } else if (modelType === 'gemini') {
        const contents = messageHistory.map(msg => ({
            role: msg.role === 'assistant' ? 'model' : msg.role,
            parts: [{ text: msg.content }],
        }));

        const systemInstruction = {
            parts: [{ text: selectedPrompt }]
        };

        body = JSON.stringify({
            contents,
            systemInstruction
        });
    }

    try {
        const response = await fetch(config.endpoint, {
            method: 'POST',
            headers: headers,
            body: body,
        });

        if (!response.ok) {
            const errorData = await response.json();
            throw new Error(`L·ªói API: ${errorData.error?.message || 'Unknown error'}`);
        }

        const data = await response.json();

        let aiMessage;
        if (modelType === 'groq') {
            aiMessage = data.choices[0]?.message?.content?.trim();
        } else if (modelType === 'gemini') {
            aiMessage = data.candidates[0]?.content?.parts[0]?.text?.trim();
        }

        if (!aiMessage) {
            throw new Error("Kh√¥ng nh·∫≠n ƒë∆∞·ª£c n·ªôi dung h·ª£p l·ªá t·ª´ AI.");
        }

        return aiMessage;

    } catch (error) {
        error(`L·ªói khi g·ªçi API ${modelType}:`, error);
        return `Xin l·ªói, ƒë√£ c√≥ l·ªói x·∫£y ra khi k·∫øt n·ªëi ƒë·∫øn ${modelType}.`;
    }
};

/**
 * Legacy function - kh√¥ng c√≤n s·ª≠ d·ª•ng trong Ph∆∞∆°ng √°n 2
 * Gi·ªØ l·∫°i ƒë·ªÉ backward compatibility
 */
export const parseProductSuggestions = async (aiResponse) => {
    // Kh√¥ng c√≤n parse JSON, ch·ªâ tr·∫£ v·ªÅ text
    return {
        analysis: aiResponse,
        products: []
    };
};

/**
 * Validate v√† format d·ªØ li·ªáu s·∫£n ph·∫©m (gi·ªØ nguy√™n d·ªØ li·ªáu SerpAPI)
 * @param {Array} products Danh s√°ch s·∫£n ph·∫©m
 * @returns {Array} Danh s√°ch s·∫£n ph·∫©m ƒë√£ ƒë∆∞·ª£c validate v√† format
 */
export const validateProductData = (products) => {
    if (!Array.isArray(products)) {
        return [];
    }

    const validatedProducts = products.map(product => ({
        name: product.name || 'Kh√¥ng c√≥ t√™n',
        brand: product.brand || 'Kh√¥ng r√µ th∆∞∆°ng hi·ªáu',
        description: product.description || 'Kh√¥ng c√≥ m√¥ t·∫£',
        estimatedPrice: product.estimatedPrice || 'Li√™n h·ªá ƒë·ªÉ bi·∫øt gi√°',
        purchaseLink: product.purchaseLink || '#',
        imageUrl: product.imageUrl || 'https://via.placeholder.com/150x150?text=No+Image',
        category: product.category || 'Kh√°c',
        // Gi·ªØ nguy√™n d·ªØ li·ªáu SerpAPI
        rating: product.rating,
        reviews: product.reviews,
        source: product.source
    }));

    return validatedProducts;
};

/**
 * Ki·ªÉm tra xem URL c√≥ ph·∫£i l√† link shop h·ª£p l·ªá kh√¥ng
 * @param {string} url URL c·∫ßn ki·ªÉm tra
 * @returns {boolean} True n·∫øu l√† link shop h·ª£p l·ªá
 */
const isValidShopUrl = (url) => {
  if (!url || typeof url !== 'string') return false;
  
  try {
    const parsedUrl = new URL(url);
    const validShopDomains = [
      'shopee.vn',
      'lazada.vn', 
      'tiki.vn',
      'sendo.vn',
      'fahasa.com',
      'bach-hoa-xanh.com',
      'dienmayxanh.com',
      'thegioididong.com',
      'cellphones.com.vn',
      'fptshop.com.vn',
      'meta.vn',
      'nguyenkim.com'
    ];
    
    return validShopDomains.some(domain => 
      parsedUrl.hostname.includes(domain) || 
      parsedUrl.hostname.endsWith(domain)
    );
  } catch {
    return false;
  }
};

/**
 * Validate URL s·∫£n ph·∫©m
 * @param {string} url URL c·∫ßn validate
 * @returns {string|null} URL h·ª£p l·ªá ho·∫∑c null
 */
const validateUrl = (url) => {
    if (!url || typeof url !== 'string') return null;

    const validDomains = ['shopee.vn', 'lazada.vn', 'tiki.vn', 'sendo.vn'];
    try {
        const parsedUrl = new URL(url);
        return validDomains.some(domain => parsedUrl.hostname.includes(domain)) ? url : null;
    } catch {
        return null;
    }
};

/**
 * Validate URL h√¨nh ·∫£nh
 * @param {string} imageUrl URL h√¨nh ·∫£nh c·∫ßn validate
 * @returns {string|null} URL h√¨nh ·∫£nh h·ª£p l·ªá ho·∫∑c null
 */
const validateImageUrl = (imageUrl) => {
    if (!imageUrl || typeof imageUrl !== 'string') return null;

    const validImageDomains = [
        'cf.shopee.vn',
        'salt.tikicdn.com',
        'laz-img-cdn.alicdn.com',
        'media3.scdn.vn'
    ];

    const validExtensions = ['.jpg', '.jpeg', '.png', '.webp'];

    try {
        const parsedUrl = new URL(imageUrl);
        const hasValidDomain = validImageDomains.some(domain => parsedUrl.hostname.includes(domain));
        const hasValidExtension = validExtensions.some(ext =>
            parsedUrl.pathname.toLowerCase().includes(ext)
        );

        return hasValidDomain && hasValidExtension ? imageUrl : null;
    } catch {
        return null;
    }
};

/**
 * Convert ·∫£nh sang Base64
 * @param {string} uri URI c·ªßa ·∫£nh
 * @returns {Promise<string>} Base64 string
 */
export const convertImageToBase64 = async (uri) => {
    try {
        const base64 = await FileSystem.readAsStringAsync(uri, {
            encoding: FileSystem.EncodingType.Base64,
        });
        return base64;
    } catch (error) {
        throw new Error(`Kh√¥ng th·ªÉ convert ·∫£nh sang Base64: ${error.message}`);
    }
};

/**
 * Ph√¢n t√≠ch ·∫£nh v·ªõi Gemini Vision
 * @param {string} imageBase64 ·∫¢nh Base64
 * @param {string} prompt Prompt ph√¢n t√≠ch
 * @returns {Promise<string>} K·∫øt qu·∫£ ph√¢n t√≠ch
 */
export const analyzeImageWithGemini = async (imageBase64, prompt = DAMAGE_ANALYSIS_PROMPT) => {
    const endpoint = `https://generativelanguage.googleapis.com/v1beta/models/gemini-1.5-flash:generateContent?key=${GEMINI_API_KEY}`;
    
    try {
        // Lo·∫°i b·ªè prefix n·∫øu c√≥
        const base64Data = imageBase64.replace(/^data:image\/[a-z]+;base64,/, '');
        
        const body = JSON.stringify({
            contents: [{
                parts: [
                    { text: prompt },
                    {
                        inline_data: {
                            mime_type: "image/jpeg",
                            data: base64Data
                        }
                    }
                ]
            }]
        });

        const response = await fetch(endpoint, {
            method: 'POST',
            headers: { 'Content-Type': 'application/json' },
            body: body
        });

        if (!response.ok) {
            const errorData = await response.json();
            throw new Error(`L·ªói API Gemini Vision: ${errorData.error?.message || 'Unknown error'}`);
        }

        const data = await response.json();
        const aiMessage = data.candidates[0]?.content?.parts[0]?.text?.trim();

        if (!aiMessage) {
            throw new Error("Kh√¥ng nh·∫≠n ƒë∆∞·ª£c n·ªôi dung h·ª£p l·ªá t·ª´ Gemini Vision.");
        }

        return aiMessage;
    } catch (error) {
        return `Xin l·ªói, ƒë√£ c√≥ l·ªói x·∫£y ra khi ph√¢n t√≠ch ·∫£nh: ${error.message}`;
    }
};

/**
 * T√¨m ki·∫øm s·∫£n ph·∫©m th·∫≠t tr√™n SerpAPI
 * @param {string} query Chu·ªói t√¨m ki·∫øm
 * @returns {Promise<Array>} Danh s√°ch s·∫£n ph·∫©m t√¨m th·∫•y
 */
export const searchRealProducts = async (query) => {
    const endpoint = `${SERP_API_BASE_URL}?api_key=${SERP_API_KEY}&q=${encodeURIComponent(query)}`;
    
    try {
        const response = await fetch(endpoint);

        if (!response.ok) {
            const errorData = await response.json();
            throw new Error(`L·ªói API SerpAPI: ${errorData.error?.message || 'Unknown error'}`);
        }

        const data = await response.json();
        return data.products || [];
    } catch (error) {
        error(`L·ªói khi g·ªçi API SerpAPI:`, error);
        return [];
    }
};

// Cache cho SerpAPI ƒë·ªÉ tr√°nh g·ªçi API nhi·ªÅu l·∫ßn
const serpCache = new Map();
const CACHE_EXPIRY = 24 * 60 * 60 * 1000; // 24 gi·ªù

// Helper function ƒë·ªÉ t·∫°o s·∫£n ph·∫©m fallback
const createFallbackProduct = (productName) => {
  return [{
    name: productName,
    price: 'Li√™n h·ªá',
    image: 'https://via.placeholder.com/150',
    link: `https://www.google.com/search?q=${encodeURIComponent(productName)}`,
    source: 'T√¨m ki·∫øm Google',
    rating: null,
    reviews: null,
    // Map th√™m c√°c field m√† UI component mong ƒë·ª£i
    imageUrl: 'https://via.placeholder.com/150',
    purchaseLink: `https://www.google.com/search?q=${encodeURIComponent(productName)}`,
    brand: 'T√¨m ki·∫øm',
    description: 'T√¨m ki·∫øm s·∫£n ph·∫©m tr√™n Google',
    estimatedPrice: 'Li√™n h·ªá',
    category: 'S·∫£n ph·∫©m'
  }];
};

// Function ƒë·ªÉ l·∫•y th√¥ng tin s·∫£n ph·∫©m th·∫≠t t·ª´ SerpAPI
export const fetchSerpProductInfo = async (productName) => {
  try {
    // Debug trong dev mode
    if (__DEV__) {
      await debugSerpResponse(productName);
    }
    
    // L√†m s·∫°ch t√™n s·∫£n ph·∫©m
    const cleanedProductName = productName.replace(/[^\w\s]/gi, '').trim();
    
    const params = new URLSearchParams({
      engine: 'google_shopping',
      q: cleanedProductName,
      api_key: SERP_API_KEY,
      num: 5, // L·∫•y 5 s·∫£n ph·∫©m ƒë·∫ßu ti√™n
      hl: 'vi', // Ti·∫øng Vi·ªát
      gl: 'vn', // Qu·ªëc gia Vi·ªát Nam
    });

    const controller = new AbortController();
    const timeoutId = setTimeout(() => controller.abort(), 8000); // Timeout 8 gi√¢y

    const response = await fetch(`${SERP_API_BASE_URL}?${params}`, {
      method: 'GET',
      signal: controller.signal,
    });

    clearTimeout(timeoutId);

    if (!response.ok) {
      throw new Error(`SerpAPI HTTP Error: ${response.status} ${response.statusText}`);
    }

    const data = await response.json();
    
    // X·ª≠ l√Ω d·ªØ li·ªáu t·ª´ SerpAPI
    if (data.shopping_results && data.shopping_results.length > 0) {
      return data.shopping_results.slice(0, 3).map(item => {
        // CH√çNH S√ÅCH ∆ØU TI√äN LINK M·ªöI - s·ª≠ d·ª•ng validateAndCleanProductLink:
        // 1. product_link (link tr·ª±c ti·∫øp ƒë·∫øn trang s·∫£n ph·∫©m, bao g·ªìm Google Shopping)
        // 2. merchant.link (link shop)
        // 3. extracted_price.link (link t·ª´ gi√°)
        // 4. link (link t·ªïng qu√°t)
        let finalLink = null;
        let linkSource = 'none';
        
        // ∆Øu ti√™n cao nh·∫•t: product_link (bao g·ªìm Google Shopping links)
        if (item.product_link) {
          finalLink = validateAndCleanProductLink(item.product_link, item.title || productName);
          linkSource = 'product_link';
        }
        // Th·ª© hai: merchant link
        else if (item.merchant && item.merchant.link) {
          finalLink = validateAndCleanProductLink(item.merchant.link, item.title || productName);
          linkSource = 'merchant.link';
        }
        // Th·ª© ba: extracted price link
        else if (item.extracted_price && item.extracted_price.link) {
          finalLink = validateAndCleanProductLink(item.extracted_price.link, item.title || productName);
          linkSource = 'extracted_price.link';
        }
        // Cu·ªëi c√πng: link t·ªïng qu√°t
        else if (item.link) {
          finalLink = validateAndCleanProductLink(item.link, item.title || productName);
          linkSource = 'link';
        }
        
        // N·∫øu kh√¥ng c√≥ link n√†o, d√πng fallback
        if (!finalLink) {
          finalLink = `https://www.google.com/search?q=${encodeURIComponent(item.title || productName)}`;
          linkSource = 'google_fallback';
        }
        
        // Debug logging
        if (__DEV__) {
          console.log(`üîó [LINK-DEBUG] Product: ${item.title}`);
          console.log(`üîó [LINK-DEBUG] Available links:`, {
            link: item.link,
            product_link: item.product_link,
            merchant_link: item.merchant?.link,
            extracted_link: item.extracted_price?.link
          });
          console.log(`üîó [LINK-DEBUG] Selected: ${finalLink} (source: ${linkSource})`);
          
          // Hi·ªÉn th·ªã lo·∫°i link ƒë∆∞·ª£c ch·ªçn
          if (finalLink && finalLink.includes('google.com/shopping')) {
            console.log(`üõí [LINK-DEBUG] Google Shopping link detected - will open product page`);
          } else if (finalLink && finalLink.includes('google.com/search')) {
            console.log(`üîç [LINK-DEBUG] Google Search fallback`);
          } else {
            console.log(`üè™ [LINK-DEBUG] Direct shop link detected`);
          }
        }
        
        return {
          name: item.title || productName,
          price: item.price || 'Li√™n h·ªá',
          image: item.thumbnail || 'https://via.placeholder.com/150',
          link: finalLink,
          source: item.source || 'Shop',
          rating: item.rating || null,
          reviews: item.reviews || null,
          // Map th√™m c√°c field m√† UI component mong ƒë·ª£i
          imageUrl: item.thumbnail || 'https://via.placeholder.com/150',
          purchaseLink: finalLink,
          brand: item.source || 'Shop',
          description: item.snippet || item.title || 'S·∫£n ph·∫©m ch·∫•t l∆∞·ª£ng',
          estimatedPrice: item.price || 'Li√™n h·ªá',
          category: 'S·∫£n ph·∫©m'
        };
      });
    }

    // Fallback n·∫øu kh√¥ng t√¨m th·∫•y s·∫£n ph·∫©m
    log(`No shopping results found for: ${productName}`);
    return createFallbackProduct(productName);

  } catch (error) {
    if (error.name === 'AbortError') {
      log('SerpAPI request timeout');
    } else {
      log('SerpAPI Error:', error.message);
    }
    
    // Fallback error - tr·∫£ v·ªÅ s·∫£n ph·∫©m m·∫∑c ƒë·ªãnh
    return createFallbackProduct(productName);
  }
};

// Function ƒë·ªÉ l·∫•y th√¥ng tin s·∫£n ph·∫©m v·ªõi cache
export const fetchSerpProductInfoWithCache = async (productName) => {
  const cacheKey = productName.toLowerCase().trim();
  const now = Date.now();
  
  // Ki·ªÉm tra cache
  if (serpCache.has(cacheKey)) {
    const cached = serpCache.get(cacheKey);
    if (now - cached.timestamp < CACHE_EXPIRY) {
      log(`Using cached result for: ${productName}`);
      return cached.data;
    } else {
      serpCache.delete(cacheKey); // X√≥a cache c≈©
    }
  }
  
  // G·ªçi API v√† cache k·∫øt qu·∫£
  try {
    const result = await fetchSerpProductInfo(productName);
    serpCache.set(cacheKey, {
      data: result,
      timestamp: now
    });
    return result;
  } catch (error) {
    // Fallback v·ªÅ s·∫£n ph·∫©m m·∫∑c ƒë·ªãnh
    return createFallbackProduct(productName);
  }
};

// Debug function ƒë·ªÉ log d·ªØ li·ªáu SerpAPI (ch·ªâ trong dev mode)
export const debugSerpResponse = async (productName) => {
  if (!__DEV__) return;
  
  try {
    const cleanedProductName = productName.replace(/[^\w\s]/gi, '').trim();
    
    const params = new URLSearchParams({
      engine: 'google_shopping',
      q: cleanedProductName,
      api_key: SERP_API_KEY,
      num: 3,
      hl: 'vi',
      gl: 'vn',
    });

    console.log(`üîç [DEBUG] Searching SerpAPI for: ${productName}`);
    console.log(`üì° [DEBUG] URL: ${SERP_API_BASE_URL}?${params}`);

    const response = await fetch(`${SERP_API_BASE_URL}?${params}`);

    if (!response.ok) {
      console.log(`‚ùå [DEBUG] HTTP Error: ${response.status}`);
      return;
    }

    const data = await response.json();
    
    console.log('üì¶ [DEBUG] Response keys:', Object.keys(data));
    
    if (data.shopping_results && data.shopping_results.length > 0) {
      console.log(`‚úÖ [DEBUG] Found ${data.shopping_results.length} shopping results`);
      
      const sample = data.shopping_results[0];
      console.log('üõçÔ∏è [DEBUG] Sample product fields:', Object.keys(sample));
      console.log('üõçÔ∏è [DEBUG] Sample data:', {
        title: sample.title,
        price: sample.price,
        source: sample.source,
        thumbnail: sample.thumbnail ? 'Has thumbnail' : 'No thumbnail',
        link: sample.link ? sample.link : 'No link',
        product_link: sample.product_link ? sample.product_link : 'No product_link',
        merchant: sample.merchant ? {
          name: sample.merchant.name,
          link: sample.merchant.link
        } : 'No merchant',
        extracted_price: sample.extracted_price ? {
          value: sample.extracted_price.value,
          link: sample.extracted_price.link
        } : 'No extracted_price',
        rating: sample.rating,
        reviews: sample.reviews,
        snippet: sample.snippet
      });
      
      // Log t·∫•t c·∫£ links c√≥ s·∫µn
      console.log('üîó [DEBUG] All available links:');
      data.shopping_results.slice(0, 3).forEach((item, index) => {
        console.log(`   Product ${index + 1}: ${item.title}`);
        console.log(`   - link: ${item.link || 'None'}`);
        console.log(`   - product_link: ${item.product_link || 'None'}`);
        console.log(`   - merchant.link: ${item.merchant?.link || 'None'}`);
        console.log(`   - extracted_price.link: ${item.extracted_price?.link || 'None'}`);
        console.log('   ---');
      });
      
    } else {
      console.log('‚ùå [DEBUG] No shopping_results found');
      console.log('üîç [DEBUG] Available keys:', Object.keys(data));
    }

  } catch (error) {
    console.log(`‚ùå [DEBUG] SerpAPI Error: ${error.message}`);
  }
};

/**
 * Extract t√™n s·∫£n ph·∫©m t·ª´ text ph√¢n t√≠ch
 * @param {string} analysisText Text ph√¢n t√≠ch t·ª´ AI
 * @returns {Array} Danh s√°ch t√™n s·∫£n ph·∫©m
 */
export const extractProductNames = (analysisText) => {
  // T√¨m d√≤ng "S·∫£n ph·∫©m c·∫ßn:"
  const productMatch = analysisText.match(/S·∫£n ph·∫©m c·∫ßn:\s*(.+)/i);
  
  if (productMatch) {
    // T√°ch c√°c s·∫£n ph·∫©m b·∫±ng d·∫•u ph·∫©y
    const products = productMatch[1]
      .split(',')
      .map(product => product.trim())
      .filter(product => product.length > 0);
    
    log(`[DEBUG] Extracted products: ${products.join(', ')}`);
    return products;
  }
  
  log('[DEBUG] No products found in analysis');
  return [];
};

/**
 * T√¨m ki·∫øm nhi·ªÅu s·∫£n ph·∫©m c√πng l√∫c v·ªõi SerpAPI
 * @param {Array} productNames Danh s√°ch t√™n s·∫£n ph·∫©m
 * @returns {Promise<Array>} Danh s√°ch s·∫£n ph·∫©m t·ª´ SerpAPI
 */
export const searchMultipleProducts = async (productNames) => {
  if (!productNames || productNames.length === 0) {
    return [];
  }

  try {
    log(`[DEBUG] Searching for ${productNames.length} products with SerpAPI`);
    
    // T√¨m t·ª´ng s·∫£n ph·∫©m song song
    const productPromises = productNames.map(name => 
      fetchSerpProductInfoWithCache(name.substring(0, 50)) // Limit length
    );
    
    const allResults = await Promise.all(productPromises);
    
    // Flatten v√† limit k·∫øt qu·∫£
    const flatProducts = allResults
      .flat()
      .filter(product => product && product.name) // Remove empty results
      .slice(0, 6); // T·ªëi ƒëa 6 s·∫£n ph·∫©m
    
    log(`[DEBUG] Found ${flatProducts.length} total products`);
    return flatProducts;
    
  } catch (error) {
    log(`[DEBUG] Error searching multiple products: ${error.message}`);
    return [];
  }
};

/**
 * Validate v√† clean link s·∫£n ph·∫©m - phi√™n b·∫£n n·ªõi l·ªèng cho ph√©p m·ªçi link
 * @param {string} link Link c·∫ßn validate
 * @param {string} productName T√™n s·∫£n ph·∫©m (d√πng cho fallback)
 * @returns {string} Link ƒë√£ ƒë∆∞·ª£c clean ho·∫∑c fallback
 */
const validateAndCleanProductLink = (link, productName) => {
  if (!link || link === '#') {
    return `https://www.google.com/search?q=${encodeURIComponent(productName)}`;
  }

  try {
    const url = new URL(link);

    // N·∫øu l√† link redirect c·ªßa Google
    if (url.hostname.includes('google.com') && url.searchParams.has('url')) {
      const realLink = url.searchParams.get('url');
      if (__DEV__) {
        console.log(`üîÑ [LINK] Google redirect detected, extracting: ${realLink}`);
      }
      return validateAndCleanProductLink(realLink, productName);
    }

    // ‚ö†Ô∏è CHO PH√âP M·ªåI LINK ‚Äì kh√¥ng ki·ªÉm tra domain
    if (__DEV__) {
      console.log(`‚úÖ [LINK] Allowing link: ${url.hostname}`);
    }
    return link;

  } catch (error) {
    // URL kh√¥ng h·ª£p l·ªá, fallback v·ªÅ search
    if (__DEV__) {
      console.log(`‚ùå [LINK] Invalid URL: ${error.message}`);
    }
    return `https://www.google.com/search?q=${encodeURIComponent(productName)}`;
  }
};

/**
 * Detect xem ng∆∞·ªùi d√πng c√≥ h·ªèi v·ªÅ s·∫£n ph·∫©m/v·∫≠t li·ªáu x√¢y d·ª±ng kh√¥ng
 * @param {string} userMessage Tin nh·∫Øn c·ªßa ng∆∞·ªùi d√πng
 * @returns {boolean} True n·∫øu l√† c√¢u h·ªèi v·ªÅ s·∫£n ph·∫©m
 */
export const isProductRelatedQuery = (userMessage) => {
  if (!userMessage || typeof userMessage !== 'string') {
    return false;
  }
  
  const message = userMessage.toLowerCase();
  
  // Keywords cho s·∫£n ph·∫©m x√¢y d·ª±ng
  const productKeywords = [
    's·∫£n ph·∫©m', 'v·∫≠t li·ªáu', 'mua', 'b√°n', 'gi√°', 'shop', 'c·ª≠a h√†ng',
    'keo', 's∆°n', 'xi mƒÉng', 'g·∫°ch', 'ng√≥i', 'th√©p', 'inox',
    '·ªëng', 'd√¢y ƒëi·ªán', 'c√¥ng t·∫Øc', '·ªï c·∫Øm', 'b√≥ng ƒë√®n',
    'kh√≥a', 'tay n·∫Øm', 'c·ª≠a', 'c·ª≠a s·ªï', 'k√≠nh',
    'g·ª£i √Ω', 'ƒë·ªÅ xu·∫•t', 't∆∞ v·∫•n mua', 'ch·ªçn', 'lo·∫°i n√†o',
    'th∆∞∆°ng hi·ªáu', 'h√£ng', 'ch·∫•t l∆∞·ª£ng', 't·ªët nh·∫•t',
    'ch·ªëng th·∫•m', 'tr√°m', 'l·∫Øp ƒë·∫∑t', 's·ª≠a ch·ªØa',
    'sikaflex', 'nippon', 'jotun', 'dulux', 'kova',
    'ho√† ph√°t', 'th√©p vi·ªát', 'viglacera', 'ƒë·ªìng t√¢m'
  ];
  
  // Intent patterns (m·∫´u c√¢u h·ªèi)
  const intentPatterns = [
    /g·ª£i √Ω.*(?:keo|s∆°n|v·∫≠t li·ªáu)/,
    /(?:mua|ch·ªçn|t√¨m).*(?:·ªü ƒë√¢u|lo·∫°i n√†o|h√£ng n√†o)/,
    /(?:s·∫£n ph·∫©m|v·∫≠t li·ªáu).*(?:t·ªët|ch·∫•t l∆∞·ª£ng|ph√π h·ª£p)/,
    /(?:gi√°|chi ph√≠).*(?:keo|s∆°n|v·∫≠t li·ªáu)/,
    /(?:th∆∞∆°ng hi·ªáu|h√£ng).*(?:n√†o|t·ªët|uy t√≠n)/,
    /(?:c√≥ n√™n|n√™n d√πng).*(?:keo|s∆°n|v·∫≠t li·ªáu)/
  ];
  
  // Ki·ªÉm tra keywords
  const hasProductKeyword = productKeywords.some(keyword => 
    message.includes(keyword)
  );
  
  // Ki·ªÉm tra intent patterns
  const hasProductIntent = intentPatterns.some(pattern => 
    pattern.test(message)
  );
  
  return hasProductKeyword || hasProductIntent;
};

/**
 * Extract t·ª´ kh√≥a s·∫£n ph·∫©m t·ª´ c√¢u h·ªèi c·ªßa ng∆∞·ªùi d√πng
 * @param {string} userMessage Tin nh·∫Øn c·ªßa ng∆∞·ªùi d√πng
 * @returns {Array} Danh s√°ch t·ª´ kh√≥a s·∫£n ph·∫©m
 */
export const extractProductKeywordsFromQuery = (userMessage) => {
  if (!userMessage || typeof userMessage !== 'string') {
    return [];
  }
  
  const message = userMessage.toLowerCase();
  
  // Common product categories v·ªõi t·ª´ kh√≥a t√¨m ki·∫øm t·ªët h∆°n
  const productMappings = {
    'keo': ['keo sikaflex', 'keo tr√°m', 'keo d√°n g·∫°ch'],
    's∆°n': ['s∆°n ch·ªëng th·∫•m', 's∆°n nippon', 's∆°n jotun'],
    'ch·ªëng th·∫•m': ['s∆°n ch·ªëng th·∫•m', 'm√†ng ch·ªëng th·∫•m', 'keo ch·ªëng th·∫•m'],
    'g·∫°ch': ['g·∫°ch ·ªëp l√°t', 'g·∫°ch ceramic', 'g·∫°ch granite'],
    'xi mƒÉng': ['xi mƒÉng portland', 'xi mƒÉng x√¢y d·ª±ng'],
    'c·ª≠a': ['c·ª≠a nh√¥m k√≠nh', 'c·ª≠a g·ªó', 'c·ª≠a s·∫Øt'],
    'th√©p': ['th√©p x√¢y d·ª±ng', 'th√©p vi·ªát ƒë·ª©c', 'th√©p ho√† ph√°t'],
    '·ªëng': ['·ªëng nh·ª±a', '·ªëng inox', '·ªëng ƒë·ªìng'],
    'ƒëi·ªán': ['d√¢y ƒëi·ªán', 'c√¥ng t·∫Øc ƒëi·ªán', '·ªï c·∫Øm ƒëi·ªán']
  };
  
  const extractedProducts = [];
  
  // T√¨m c√°c category matches
  Object.keys(productMappings).forEach(category => {
    if (message.includes(category)) {
      extractedProducts.push(...productMappings[category]);
    }
  });
  
  // N·∫øu kh√¥ng t√¨m th·∫•y category c·ª• th·ªÉ, extract t·ª´ general keywords
  if (extractedProducts.length === 0) {
    const generalProducts = [
      'v·∫≠t li·ªáu x√¢y d·ª±ng',
      's·∫£n ph·∫©m s·ª≠a ch·ªØa nh√†',
      'thi·∫øt b·ªã x√¢y d·ª±ng'
    ];
    extractedProducts.push(...generalProducts);
  }
  
  // Remove duplicates v√† limit
  return [...new Set(extractedProducts)].slice(0, 3);
};