import * as FileSystem from 'expo-file-system';

// --- API Keys (S·ª≠ d·ª•ng bi·∫øn m√¥i tr∆∞·ªùng) ---
// API keys ƒë∆∞·ª£c l∆∞u tr·ªØ trong file .env (kh√¥ng ƒë∆∞·ª£c commit l√™n git)
const GEMINI_API_KEY = process.env.GEMINI_API_KEY;

// SerpAPI Configuration
const SERP_API_KEY = process.env.SERP_API_KEY;
const SERP_API_BASE_URL = 'https://serpapi.com/search';

// Import optimized logger
const log = __DEV__ ? console.log : () => { };
const error = __DEV__ ? console.error : () => { };

const DAMAGE_ANALYSIS_PROMPT = `B·∫°n l√† chuy√™n gia x√¢y d·ª±ng th√¢n thi·ªán v·ªõi 15 nƒÉm kinh nghi·ªám th·ª±c t·∫ø.

N·∫øu l√† C√îNG TR√åNH X√ÇY D·ª∞NG:

üîç PH√ÇN T√çCH CHUY√äN S√ÇU:

1. NH·∫¨N DI·ªÜN C·∫§U KI·ªÜN & H∆Ø H·∫†I:
- Lo·∫°i c·∫•u ki·ªán: t∆∞·ªùng (g·∫°ch/b√™ t√¥ng), tr·∫ßn, s√†n, c·ªôt, d·∫ßm, m√°i, c·ª≠a.
- V·∫≠t li·ªáu: g·∫°ch nung, b√™ t√¥ng, th·∫°ch cao, g·ªó, th√©p, v.v.
- H∆∞ h·∫°i: n·ª©t, th·∫•m n∆∞·ªõc, bong tr√≥c, m·ªëc, bi·∫øn d·∫°ng, v√µng, x√™ d·ªãch.
- M√¥ t·∫£ chi ti·∫øt: k√≠ch th∆∞·ªõc, h√¨nh d·∫°ng v√† d·∫•u hi·ªáu ti·∫øn tri·ªÉn.

2. V·ªä TR√ç & ·∫¢NH H∆Ø·ªûNG K·∫æT C·∫§U:
- V·ªã tr√≠: trong/ngo√†i nh√†, khu v·ª±c c·ª• th·ªÉ (nh√† b·∫øp, ph√≤ng t·∫Øm, ban c√¥ng...).
- Lo·∫°i c·∫•u ki·ªán: k·∫øt c·∫•u ch·ªãu l·ª±c ch√≠nh / kh√¥ng ch·ªãu l·ª±c / b·∫£o v·ªá.
- M·ª©c ƒë·ªô ·∫£nh h∆∞·ªüng: an to√†n k·∫øt c·∫•u / th·∫©m m·ªπ / ch·ª©c nƒÉng s·ª≠ d·ª•ng.

3. ƒê√ÅNH GI√Å M·ª®C ƒê·ªò:
- Ph√¢n lo·∫°i: NH·∫∏ / TRUNG B√åNH / N·∫∂NG.
- L√Ω do ph√¢n lo·∫°i: d·ª±a tr√™n d·∫•u hi·ªáu trong ·∫£nh.
- C·∫£nh b√°o: ƒë∆∞a ra n·∫øu c√≥ nguy c∆° m·∫•t an to√†n.

4. PH√ÇN T√çCH NGUY√äN NH√ÇN:
- D·ª± ƒëo√°n nguy√™n nh√¢n k·ªπ thu·∫≠t: li·ªát k√™ kh·∫£ nƒÉng.
- Nh√≥m nguy√™n nh√¢n:
  + Do thi c√¥ng: n·∫øu c√≥, n√™u d·∫•u hi·ªáu c·ª• th·ªÉ.
  + Do v·∫≠t li·ªáu: ph√¢n t√≠ch k·ªπ thu·∫≠t r√µ r√†ng.
  + Do m√¥i tr∆∞·ªùng: y·∫øu t·ªë th·ªùi ti·∫øt, ƒë·ªô ·∫©m, nhi·ªát ƒë·ªô...
  + Do n·ªÅn m√≥ng: n·∫øu nghi ng·ªù, ch·ªâ r√µ d·∫•u hi·ªáu.
  + Do t·∫£i tr·ªçng: n·∫øu c√≥, ph√¢n t√≠ch li√™n quan.
- D·∫•u hi·ªáu ph√¢n t√≠ch: li√™n h·ªá c·ª• th·ªÉ t·ª´ ·∫£nh, gi·∫£i th√≠ch theo g√≥c nh√¨n k·ªπ thu·∫≠t.

5. H∆Ø·ªöNG D·∫™N X·ª¨ L√ù:
- Tr√¨nh b√†y 3 b∆∞·ªõc x·ª≠ l√Ω r√µ r√†ng, ƒë√∫ng k·ªπ thu·∫≠t.
- V·∫≠t li·ªáu ƒë·ªÅ xu·∫•t: keo tr√°m, v·ªØa, s∆°n ch·ªëng th·∫•m, epoxy...
- N√™u r√µ ph∆∞∆°ng ph√°p thi c√¥ng.
- C√≥ khuy·∫øn ngh·ªã g·ªçi k·ªπ s∆∞ n·∫øu c·∫ßn thi·∫øt.

N·∫øu KH√îNG PH·∫¢I C√îNG TR√åNH:
- Tr√≤ chuy·ªán t·ª± nhi√™n, m√¥ t·∫£ ·∫£nh t√≠ch c·ª±c, li√™n k·∫øt t·ªõi x√¢y d·ª±ng n·∫øu c√≥ th·ªÉ.

‚ö†Ô∏è QUY T·∫ÆC QUAN TR·ªåNG:
- M·ªói ph·∫ßn tr·∫£ l·ªùi ch·ªâ 2‚Äì3 d√≤ng, s√∫c t√≠ch v√† th·ª±c t·∫ø.
- Ph√¢n t√≠ch trung th·ª±c, kh√¥ng ph√≥ng ƒë·∫°i.
- ∆Øu ti√™n y·∫øu t·ªë an to√†n. N·∫øu kh√¥ng r√µ, h√£y n√≥i: ‚ÄúC·∫ßn th√™m th√¥ng tin.‚Äù
- Lu√¥n c·∫£nh b√°o n·∫øu c√≥ d·∫•u hi·ªáu nguy hi·ªÉm ti·ªÅm ·∫©n.

K·∫æT TH√öC b·∫±ng danh s√°ch s·∫£n ph·∫©m c·∫ßn d√πng nh∆∞ l√†:
"S·∫£n ph·∫©m c·∫ßn: Keo Sikaflex, S∆°n ch·ªëng th·∫•m Nippon, V·∫£i th·ªßy tinh."

KH√îNG vi·∫øt th·ª´a. Tr·∫£ l·ªùi NG·∫ÆN G·ªåN, S√ÅT TH·ª∞C T·∫æ.`;


const GENERAL_CHAT_PROMPT = `
B·∫°n l√† chuy√™n gia x√¢y d·ª±ng th√¢n thi·ªán, c√≥ kinh nghi·ªám th·ª±c t·∫ø t·∫°i Vi·ªát Nam.

üåü ** PHONG C√ÅCH GIAO TI·∫æP **:
- N√≥i chuy·ªán t·ª± nhi√™n nh∆∞ b·∫°n b√®
  - Chia s·∫ª kinh nghi·ªám c√° nh√¢n
    - H·ªèi l·∫°i ƒë·ªÉ hi·ªÉu r√µ nhu c·∫ßu
      - ƒê∆∞a ra l·ªùi khuy√™n thi·∫øt th·ª±c

üìå ** H·ªñ TR·ª¢ **:
- T∆∞ v·∫•n x√¢y d·ª±ng, s·ª≠a ch·ªØa nh√†
  - L·ª±a ch·ªçn v·∫≠t li·ªáu ph√π h·ª£p
    - ∆Ø·ªõc t√≠nh chi ph√≠ d·ª± √°n
      - Gi·∫£i quy·∫øt v·∫•n ƒë·ªÅ k·ªπ thu·∫≠t
        - Chia s·∫ª kinh nghi·ªám th·ª±c t·∫ø

Tr·∫£ l·ªùi ng·∫Øn g·ªçn(3 ƒëo·∫°n), b·∫±ng ti·∫øng Vi·ªát, t·ª± nhi√™n v√† c√≥ c·∫£m x√∫c!`;

const API_CONFIG = {
  'gemini-vision': {
    endpoint: `https://generativelanguage.googleapis.com/v1beta/models/gemini-2.5-flash:generateContent?key=${GEMINI_API_KEY}`,
    apiKey: GEMINI_API_KEY,
  }
};

/**
 * Ph√¢n t√≠ch ·∫£nh v·ªõi Gemini Pro Vision
 * @param {string} imageBase64 ·∫¢nh ƒë√£ ƒë∆∞·ª£c encode th√†nh Base64
 * @param {string} prompt Prompt ƒë·ªÉ ph√¢n t√≠ch ·∫£nh (m·∫∑c ƒë·ªãnh l√† ph√¢n t√≠ch t·ªïng qu√°t)
 * @returns {Promise<string>} K·∫øt qu·∫£ ph√¢n t√≠ch ·∫£nh
 */
export const responseText = async (messageHistory) => {
  const config = API_CONFIG['gemini-vision'];

  try {
    // T·∫°o contents v·ªõi prompt h·ªá th·ªëng v√† n·ªôi dung user
    const contents = [
      {
        parts: [{ text: GENERAL_CHAT_PROMPT + "\n\nC√¢u h·ªèi: " + messageHistory[0].content }],
        role: 'user'
      }
    ];

    const body = JSON.stringify({
      contents: contents
    });

    const response = await fetch(config.endpoint, {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json'
      },
      body: body
    });

    if (!response.ok) {
      const errorData = await response.json();
      console.error('Chi ti·∫øt l·ªói:', errorData);
      throw new Error(`L·ªói API: ${errorData.error?.message || 'Unknown error'}`);
    }

    const data = await response.json();
    const aiMessage = data.candidates[0]?.content?.parts[0]?.text?.trim();

    if (!aiMessage) {
      throw new Error("Kh√¥ng nh·∫≠n ƒë∆∞·ª£c n·ªôi dung h·ª£p l·ªá t·ª´ AI.");
    }

    console.log('Ph·∫£n h·ªìi t·ª´ AI:', aiMessage);
    return aiMessage;

  } catch (error) {
    console.error('L·ªói khi chat v·ªõi AI:', error);
    throw error;
  }
}
export const analyzeImageWithGemini = async (imageBase64, prompt = DAMAGE_ANALYSIS_PROMPT, messageHistory = []) => {
  const config = API_CONFIG['gemini-vision'];

  try {
    // Lo·∫°i b·ªè data URL prefix n·∫øu c√≥
    const base64Data = imageBase64.replace(/^data:image\/[a-z]+;base64,/, '');

    // Chu·∫©n b·ªã n·ªôi dung cho AI
    const parts = [
      { text: prompt }
    ];

    // Th√™m context t·ª´ l·ªãch s·ª≠ chat n·∫øu c√≥
    if (messageHistory && messageHistory.length > 0) {
      const contextText = "\n\nNG·ªÆ C·∫¢NH CU·ªòC TR√í CHUY·ªÜN:\n" +
        messageHistory.map(msg => `${msg.role === 'user' ? 'Ng∆∞·ªùi d√πng' : 'AI'}: ${msg.content}`).join('\n') +
        "\n\nVui l√≤ng ph√¢n t√≠ch ·∫£nh v·ªõi ng·ªØ c·∫£nh tr√™n v√† tr·∫£ l·ªùi ph√π h·ª£p:";
      parts[0].text += contextText;
    }

    // Th√™m ·∫£nh
    parts.push({
      inline_data: {
        mime_type: "image/jpeg",
        data: base64Data
      }
    });

    const body = JSON.stringify({
      contents: [
        {
          parts: parts
        }
      ]
    });
    const response = await fetch(config.endpoint, {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json'
      },
      body: body
    });

    if (!response.ok) {
      const errorData = await response.json();
      console.error('Chi ti·∫øt l·ªói Gemini Vision:', errorData);
      throw new Error(`L·ªói API Gemini Vision: ${errorData.error?.message || 'Unknown error'}`);
    }
    const data = await response.json();
    const aiMessage = data.candidates[0]?.content?.parts[0]?.text?.trim();
    if (!aiMessage) {
      throw new Error("Kh√¥ng nh·∫≠n ƒë∆∞·ª£c n·ªôi dung h·ª£p l·ªá t·ª´ Gemini Vision.");
    }

    console.log('Ph√¢n t√≠ch ·∫£nh th√†nh c√¥ng:', aiMessage);
    return aiMessage;

  } catch (error) {
    console.error('L·ªói khi ph√¢n t√≠ch ·∫£nh v·ªõi Gemini Vision:', error);
    return `Xin l·ªói, ƒë√£ c√≥ l·ªói x·∫£y ra khi ph√¢n t√≠ch ·∫£nh: ${error.message}`;
  }
};

/**
 * L·∫•y ph·∫£n h·ªìi t·ª´ model AI ƒë∆∞·ª£c ch·ªçn
 * @param {string} content N·ªôi dung y√™u c·∫ßu c·∫ßn g·ª≠i t·ªõi AI
 * @param {'groq' | 'gemini' | 'gemini-vision'} modelType Lo·∫°i model ƒë·ªÉ s·ª≠ d·ª•ng
 * @param {boolean} hasImage C√≥ ·∫£nh trong tin nh·∫Øn hay kh√¥ng
 * @param {string} imageBase64 ·∫¢nh Base64 (ch·ªâ d√†nh cho gemini-vision)
 * @returns {Promise<string>} N·ªôi dung ph·∫£n h·ªìi t·ª´ AI (bao g·ªìm JSON block n·∫øu c·∫ßn g·ª£i √Ω s·∫£n ph·∫©m)
 */
export const getAiResponse = async (content, modelType, hasImage = false, imageBase64 = null) => {
  const config = API_CONFIG[modelType];
  if (!config) {
    return "L·ªói: Model kh√¥ng ƒë∆∞·ª£c h·ªó tr·ª£.";
  }

  try {
    if (hasImage && imageBase64) {
      // X·ª≠ l√Ω ·∫£nh v·ªõi Gemini Vision
      return await analyzeImageWithGemini(imageBase64, DAMAGE_ANALYSIS_PROMPT, []);
    } else {
      // X·ª≠ l√Ω chat text thu·∫ßn - t·∫°o messageHistory ƒë∆°n gi·∫£n t·ª´ content
      const messageHistory = [{ role: 'user', content: content }];
      return await responseText(messageHistory);
    }
  } catch (error) {
    console.error('L·ªói trong getAiResponse:', error);
    return `Xin l·ªói, ƒë√£ c√≥ l·ªói x·∫£y ra: ${error.message}`;
  }
};
/**
 * T√¨m ki·∫øm s·∫£n ph·∫©m th·∫≠t tr√™n SerpAPI
 * @param {string} query Chu·ªói t√¨m ki·∫øm
 * @returns {Promise<Array>} Danh s√°ch s·∫£n ph·∫©m t√¨m th·∫•y
 */
export const searchRealProducts = async (query) => {
  const endpoint = `${SERP_API_BASE_URL}?api_key=${SERP_API_KEY}&q=${encodeURIComponent(query)}`;

  try {
    const response = await fetch(endpoint);

    if (!response.ok) {
      const errorData = await response.json();
      throw new Error(`L·ªói API SerpAPI: ${errorData.error?.message || 'Unknown error'}`);
    }

    const data = await response.json();
    return data.products || [];
  } catch (error) {
    error(`L·ªói khi g·ªçi API SerpAPI:`, error);
    return [];
  }
};

// Cache cho SerpAPI ƒë·ªÉ tr√°nh g·ªçi API nhi·ªÅu l·∫ßn
const serpCache = new Map();
const CACHE_EXPIRY = 24 * 60 * 60 * 1000; // 24 gi·ªù

// Helper function ƒë·ªÉ t·∫°o s·∫£n ph·∫©m fallback
const createFallbackProduct = (productName) => {
  return [{
    name: productName,
    price: 'Li√™n h·ªá',
    image: 'https://via.placeholder.com/150',
    link: `https://www.google.com/search?q=${encodeURIComponent(productName)}`,
    source: 'T√¨m ki·∫øm Google',
    rating: null,
    reviews: null,
    // Map th√™m c√°c field m√† UI component mong ƒë·ª£i
    imageUrl: 'https://via.placeholder.com/150',
    purchaseLink: `https://www.google.com/search?q=${encodeURIComponent(productName)}`,
    brand: 'T√¨m ki·∫øm',
    description: 'T√¨m ki·∫øm s·∫£n ph·∫©m tr√™n Google',
    estimatedPrice: 'Li√™n h·ªá',
    category: 'S·∫£n ph·∫©m'
  }];
};

// Function ƒë·ªÉ l·∫•y th√¥ng tin s·∫£n ph·∫©m th·∫≠t t·ª´ SerpAPI
export const fetchSerpProductInfo = async (productName) => {
  try {
    // Debug trong dev mode
    if (__DEV__) {
      await debugSerpResponse(productName);
    }

    // L√†m s·∫°ch t√™n s·∫£n ph·∫©m
    const cleanedProductName = productName.replace(/[^\w\s]/gi, '').trim();

    const params = new URLSearchParams({
      engine: 'google_shopping',
      q: cleanedProductName,
      api_key: SERP_API_KEY,
      num: 5, // L·∫•y 5 s·∫£n ph·∫©m ƒë·∫ßu ti√™n
      hl: 'vi', // Ti·∫øng Vi·ªát
      gl: 'vn', // Qu·ªëc gia Vi·ªát Nam
    });

    const controller = new AbortController();
    const timeoutId = setTimeout(() => controller.abort(), 8000); // Timeout 8 gi√¢y

    const response = await fetch(`${SERP_API_BASE_URL}?${params}`, {
      method: 'GET',
      signal: controller.signal,
    });

    clearTimeout(timeoutId);

    if (!response.ok) {
      throw new Error(`SerpAPI HTTP Error: ${response.status} ${response.statusText}`);
    }

    const data = await response.json();

    // X·ª≠ l√Ω d·ªØ li·ªáu t·ª´ SerpAPI
    if (data.shopping_results && data.shopping_results.length > 0) {
      return data.shopping_results.slice(0, 3).map(item => {
        // CH√çNH S√ÅCH ∆ØU TI√äN LINK M·ªöI - s·ª≠ d·ª•ng validateAndCleanProductLink:
        // 1. product_link (link tr·ª±c ti·∫øp ƒë·∫øn trang s·∫£n ph·∫©m, bao g·ªìm Google Shopping)
        // 2. merchant.link (link shop)
        // 3. extracted_price.link (link t·ª´ gi√°)
        // 4. link (link t·ªïng qu√°t)
        let finalLink = null;
        let linkSource = 'none';

        // ∆Øu ti√™n cao nh·∫•t: product_link (bao g·ªìm Google Shopping links)
        if (item.product_link) {
          finalLink = validateAndCleanProductLink(item.product_link, item.title || productName);
          linkSource = 'product_link';
        }
        // Th·ª© hai: merchant link
        else if (item.merchant && item.merchant.link) {
          finalLink = validateAndCleanProductLink(item.merchant.link, item.title || productName);
          linkSource = 'merchant.link';
        }
        // Th·ª© ba: extracted price link
        else if (item.extracted_price && item.extracted_price.link) {
          finalLink = validateAndCleanProductLink(item.extracted_price.link, item.title || productName);
          linkSource = 'extracted_price.link';
        }
        // Cu·ªëi c√πng: link t·ªïng qu√°t
        else if (item.link) {
          finalLink = validateAndCleanProductLink(item.link, item.title || productName);
          linkSource = 'link';
        }

        // N·∫øu kh√¥ng c√≥ link n√†o, d√πng fallback
        if (!finalLink) {
          finalLink = `https://www.google.com/search?q=${encodeURIComponent(item.title || productName)}`;
          linkSource = 'google_fallback';
        }

        // Debug logging
        if (__DEV__) {
          console.log(`üîó [LINK-DEBUG] Product: ${item.title}`);
          console.log(`üîó [LINK-DEBUG] Available links:`, {
            link: item.link,
            product_link: item.product_link,
            merchant_link: item.merchant?.link,
            extracted_link: item.extracted_price?.link
          });
          console.log(`üîó [LINK-DEBUG] Selected: ${finalLink} (source: ${linkSource})`);

          // Hi·ªÉn th·ªã lo·∫°i link ƒë∆∞·ª£c ch·ªçn
          if (finalLink && finalLink.includes('google.com/shopping')) {
            console.log(`üõí [LINK-DEBUG] Google Shopping link detected - will open product page`);
          } else if (finalLink && finalLink.includes('google.com/search')) {
            console.log(`üîç [LINK-DEBUG] Google Search fallback`);
          } else {
            console.log(`üè™ [LINK-DEBUG] Direct shop link detected`);
          }
        }

        return {
          name: item.title || productName,
          price: item.price || 'Li√™n h·ªá',
          image: item.thumbnail || 'https://via.placeholder.com/150',
          link: finalLink,
          source: item.source || 'Shop',
          rating: item.rating || null,
          reviews: item.reviews || null,
          // Map th√™m c√°c field m√† UI component mong ƒë·ª£i
          imageUrl: item.thumbnail || 'https://via.placeholder.com/150',
          purchaseLink: finalLink,
          brand: item.source || 'Shop',
          description: item.snippet || item.title || 'S·∫£n ph·∫©m ch·∫•t l∆∞·ª£ng',
          estimatedPrice: item.price || 'Li√™n h·ªá',
          category: 'S·∫£n ph·∫©m'
        };
      });
    }

    // Fallback n·∫øu kh√¥ng t√¨m th·∫•y s·∫£n ph·∫©m
    log(`No shopping results found for: ${productName}`);
    return createFallbackProduct(productName);

  } catch (error) {
    if (error.name === 'AbortError') {
      log('SerpAPI request timeout');
    } else {
      log('SerpAPI Error:', error.message);
    }

    // Fallback error - tr·∫£ v·ªÅ s·∫£n ph·∫©m m·∫∑c ƒë·ªãnh
    return createFallbackProduct(productName);
  }
};

// Function ƒë·ªÉ l·∫•y th√¥ng tin s·∫£n ph·∫©m v·ªõi cache
export const fetchSerpProductInfoWithCache = async (productName) => {
  const cacheKey = productName.toLowerCase().trim();
  const now = Date.now();

  // Ki·ªÉm tra cache
  if (serpCache.has(cacheKey)) {
    const cached = serpCache.get(cacheKey);
    if (now - cached.timestamp < CACHE_EXPIRY) {
      log(`Using cached result for: ${productName}`);
      return cached.data;
    } else {
      serpCache.delete(cacheKey); // X√≥a cache c≈©
    }
  }

  // G·ªçi API v√† cache k·∫øt qu·∫£
  try {
    const result = await fetchSerpProductInfo(productName);
    serpCache.set(cacheKey, {
      data: result,
      timestamp: now
    });
    return result;
  } catch (error) {
    // Fallback v·ªÅ s·∫£n ph·∫©m m·∫∑c ƒë·ªãnh
    return createFallbackProduct(productName);
  }
};

// Debug function ƒë·ªÉ log d·ªØ li·ªáu SerpAPI (ch·ªâ trong dev mode)
export const debugSerpResponse = async (productName) => {
  if (!__DEV__) return;

  try {
    const cleanedProductName = productName.replace(/[^\w\s]/gi, '').trim();

    const params = new URLSearchParams({
      engine: 'google_shopping',
      q: cleanedProductName,
      api_key: SERP_API_KEY,
      num: 3,
      hl: 'vi',
      gl: 'vn',
    });

    console.log(`üîç [DEBUG] Searching SerpAPI for: ${productName}`);
    console.log(`üì° [DEBUG] URL: ${SERP_API_BASE_URL}?${params}`);

    const response = await fetch(`${SERP_API_BASE_URL}?${params}`);

    if (!response.ok) {
      console.log(`‚ùå [DEBUG] HTTP Error: ${response.status}`);
      return;
    }

    const data = await response.json();

    console.log('üì¶ [DEBUG] Response keys:', Object.keys(data));

    if (data.shopping_results && data.shopping_results.length > 0) {
      console.log(`‚úÖ [DEBUG] Found ${data.shopping_results.length} shopping results`);

      const sample = data.shopping_results[0];
      console.log('üõçÔ∏è [DEBUG] Sample product fields:', Object.keys(sample));
      console.log('üõçÔ∏è [DEBUG] Sample data:', {
        title: sample.title,
        price: sample.price,
        source: sample.source,
        thumbnail: sample.thumbnail ? 'Has thumbnail' : 'No thumbnail',
        link: sample.link ? sample.link : 'No link',
        product_link: sample.product_link ? sample.product_link : 'No product_link',
        merchant: sample.merchant ? {
          name: sample.merchant.name,
          link: sample.merchant.link
        } : 'No merchant',
        extracted_price: sample.extracted_price ? {
          value: sample.extracted_price.value,
          link: sample.extracted_price.link
        } : 'No extracted_price',
        rating: sample.rating,
        reviews: sample.reviews,
        snippet: sample.snippet
      });

      // Log t·∫•t c·∫£ links c√≥ s·∫µn
      console.log('üîó [DEBUG] All available links:');
      data.shopping_results.slice(0, 3).forEach((item, index) => {
        console.log(`   Product ${index + 1}: ${item.title}`);
        console.log(`   - link: ${item.link || 'None'}`);
        console.log(`   - product_link: ${item.product_link || 'None'}`);
        console.log(`   - merchant.link: ${item.merchant?.link || 'None'}`);
        console.log(`   - extracted_price.link: ${item.extracted_price?.link || 'None'}`);
        console.log('   ---');
      });

    } else {
      console.log('‚ùå [DEBUG] No shopping_results found');
      console.log('üîç [DEBUG] Available keys:', Object.keys(data));
    }

  } catch (error) {
    console.log(`‚ùå [DEBUG] SerpAPI Error: ${error.message}`);
  }
};

/**
 * Extract t√™n s·∫£n ph·∫©m t·ª´ text ph√¢n t√≠ch
 * @param {string} analysisText Text ph√¢n t√≠ch t·ª´ AI
 * @returns {Array} Danh s√°ch t√™n s·∫£n ph·∫©m
 */
export const extractProductNames = (analysisText) => {
  // T√¨m d√≤ng "S·∫£n ph·∫©m c·∫ßn:"
  const productMatch = analysisText.match(/S·∫£n ph·∫©m c·∫ßn:\s*(.+)/i);

  if (productMatch) {
    // T√°ch c√°c s·∫£n ph·∫©m b·∫±ng d·∫•u ph·∫©y
    const products = productMatch[1]
      .split(',')
      .map(product => product.trim())
      .filter(product => product.length > 0);

    log(`[DEBUG] Extracted products: ${products.join(', ')}`);
    return products;
  }

  log('[DEBUG] No products found in analysis');
  return [];
};

/**
 * T√¨m ki·∫øm nhi·ªÅu s·∫£n ph·∫©m c√πng l√∫c v·ªõi SerpAPI
 * @param {Array} productNames Danh s√°ch t√™n s·∫£n ph·∫©m
 * @returns {Promise<Array>} Danh s√°ch s·∫£n ph·∫©m t·ª´ SerpAPI
 */
export const searchMultipleProducts = async (productNames) => {
  if (!productNames || productNames.length === 0) {
    return [];
  }

  try {
    log(`[DEBUG] Searching for ${productNames.length} products with SerpAPI`);

    // T√¨m t·ª´ng s·∫£n ph·∫©m song song
    const productPromises = productNames.map(name =>
      fetchSerpProductInfoWithCache(name.substring(0, 50)) // Limit length
    );

    const allResults = await Promise.all(productPromises);

    // Flatten v√† limit k·∫øt qu·∫£
    const flatProducts = allResults
      .flat()
      .filter(product => product && product.name) // Remove empty results
      .slice(0, 6); // T·ªëi ƒëa 6 s·∫£n ph·∫©m

    log(`[DEBUG] Found ${flatProducts.length} total products`);
    return flatProducts;

  } catch (error) {
    log(`[DEBUG] Error searching multiple products: ${error.message}`);
    return [];
  }
};

/**
 * Validate v√† clean link s·∫£n ph·∫©m - phi√™n b·∫£n n·ªõi l·ªèng cho ph√©p m·ªçi link
 * @param {string} link Link c·∫ßn validate
 * @param {string} productName T√™n s·∫£n ph·∫©m (d√πng cho fallback)
 * @returns {string} Link ƒë√£ ƒë∆∞·ª£c clean ho·∫∑c fallback
 */
const validateAndCleanProductLink = (link, productName) => {
  if (!link || link === '#') {
    return `https://www.google.com/search?q=${encodeURIComponent(productName)}`;
  }

  try {
    const url = new URL(link);

    // N·∫øu l√† link redirect c·ªßa Google
    if (url.hostname.includes('google.com') && url.searchParams.has('url')) {
      const realLink = url.searchParams.get('url');
      if (__DEV__) {
        console.log(`üîÑ [LINK] Google redirect detected, extracting: ${realLink}`);
      }
      return validateAndCleanProductLink(realLink, productName);
    }

    // ‚ö†Ô∏è CHO PH√âP M·ªåI LINK ‚Äì kh√¥ng ki·ªÉm tra domain
    if (__DEV__) {
      console.log(`‚úÖ [LINK] Allowing link: ${url.hostname}`);
    }
    return link;

  } catch (error) {
    // URL kh√¥ng h·ª£p l·ªá, fallback v·ªÅ search
    if (__DEV__) {
      console.log(`‚ùå [LINK] Invalid URL: ${error.message}`);
    }
    return `https://www.google.com/search?q=${encodeURIComponent(productName)}`;
  }
};

/**
 * Detect xem ng∆∞·ªùi d√πng c√≥ h·ªèi v·ªÅ s·∫£n ph·∫©m/v·∫≠t li·ªáu x√¢y d·ª±ng kh√¥ng
 * @param {string} userMessage Tin nh·∫Øn c·ªßa ng∆∞·ªùi d√πng
 * @returns {boolean} True n·∫øu l√† c√¢u h·ªèi v·ªÅ s·∫£n ph·∫©m
 */
export const isProductRelatedQuery = (userMessage) => {
  if (!userMessage || typeof userMessage !== 'string') {
    return false;
  }

  const message = userMessage.toLowerCase();

  // Keywords cho s·∫£n ph·∫©m x√¢y d·ª±ng
  const productKeywords = [
    's·∫£n ph·∫©m', 'v·∫≠t li·ªáu', 'mua', 'b√°n', 'gi√°', 'shop', 'c·ª≠a h√†ng',
    'keo', 's∆°n', 'xi mƒÉng', 'g·∫°ch', 'ng√≥i', 'th√©p', 'inox',
    '·ªëng', 'd√¢y ƒëi·ªán', 'c√¥ng t·∫Øc', '·ªï c·∫Øm', 'b√≥ng ƒë√®n',
    'kh√≥a', 'tay n·∫Øm', 'c·ª≠a', 'c·ª≠a s·ªï', 'k√≠nh',
    'g·ª£i √Ω', 'ƒë·ªÅ xu·∫•t', 't∆∞ v·∫•n mua', 'ch·ªçn', 'lo·∫°i n√†o',
    'th∆∞∆°ng hi·ªáu', 'h√£ng', 'ch·∫•t l∆∞·ª£ng', 't·ªët nh·∫•t',
    'ch·ªëng th·∫•m', 'tr√°m', 'l·∫Øp ƒë·∫∑t', 's·ª≠a ch·ªØa',
    'sikaflex', 'nippon', 'jotun', 'dulux', 'kova',
    'ho√† ph√°t', 'th√©p vi·ªát', 'viglacera', 'ƒë·ªìng t√¢m'
  ];

  // Intent patterns (m·∫´u c√¢u h·ªèi)
  const intentPatterns = [
    /g·ª£i √Ω.*(?:keo|s∆°n|v·∫≠t li·ªáu)/,
    /(?:mua|ch·ªçn|t√¨m).*(?:·ªü ƒë√¢u|lo·∫°i n√†o|h√£ng n√†o)/,
    /(?:s·∫£n ph·∫©m|v·∫≠t li·ªáu).*(?:t·ªët|ch·∫•t l∆∞·ª£ng|ph√π h·ª£p)/,
    /(?:gi√°|chi ph√≠).*(?:keo|s∆°n|v·∫≠t li·ªáu)/,
    /(?:th∆∞∆°ng hi·ªáu|h√£ng).*(?:n√†o|t·ªët|uy t√≠n)/,
    /(?:c√≥ n√™n|n√™n d√πng).*(?:keo|s∆°n|v·∫≠t li·ªáu)/
  ];

  // Ki·ªÉm tra keywords
  const hasProductKeyword = productKeywords.some(keyword =>
    message.includes(keyword)
  );

  // Ki·ªÉm tra intent patterns
  const hasProductIntent = intentPatterns.some(pattern =>
    pattern.test(message)
  );

  return hasProductKeyword || hasProductIntent;
};

/**
 * Extract t·ª´ kh√≥a s·∫£n ph·∫©m t·ª´ c√¢u h·ªèi c·ªßa ng∆∞·ªùi d√πng
 * @param {string} userMessage Tin nh·∫Øn c·ªßa ng∆∞·ªùi d√πng
 * @returns {Array} Danh s√°ch t·ª´ kh√≥a s·∫£n ph·∫©m
 */
export const extractProductKeywordsFromQuery = (userMessage) => {
  if (!userMessage || typeof userMessage !== 'string') {
    return [];
  }

  const message = userMessage.toLowerCase();

  // Common product categories v·ªõi t·ª´ kh√≥a t√¨m ki·∫øm t·ªët h∆°n
  const productMappings = {
    'keo': ['keo sikaflex', 'keo tr√°m', 'keo d√°n g·∫°ch'],
    's∆°n': ['s∆°n ch·ªëng th·∫•m', 's∆°n nippon', 's∆°n jotun'],
    'ch·ªëng th·∫•m': ['s∆°n ch·ªëng th·∫•m', 'm√†ng ch·ªëng th·∫•m', 'keo ch·ªëng th·∫•m'],
    'g·∫°ch': ['g·∫°ch ·ªëp l√°t', 'g·∫°ch ceramic', 'g·∫°ch granite'],
    'xi mƒÉng': ['xi mƒÉng portland', 'xi mƒÉng x√¢y d·ª±ng'],
    'c·ª≠a': ['c·ª≠a nh√¥m k√≠nh', 'c·ª≠a g·ªó', 'c·ª≠a s·∫Øt'],
    'th√©p': ['th√©p x√¢y d·ª±ng', 'th√©p vi·ªát ƒë·ª©c', 'th√©p ho√† ph√°t'],
    '·ªëng': ['·ªëng nh·ª±a', '·ªëng inox', '·ªëng ƒë·ªìng'],
    'ƒëi·ªán': ['d√¢y ƒëi·ªán', 'c√¥ng t·∫Øc ƒëi·ªán', '·ªï c·∫Øm ƒëi·ªán']
  };

  const extractedProducts = [];

  // T√¨m c√°c category matches
  Object.keys(productMappings).forEach(category => {
    if (message.includes(category)) {
      extractedProducts.push(...productMappings[category]);
    }
  });

  // N·∫øu kh√¥ng t√¨m th·∫•y category c·ª• th·ªÉ, extract t·ª´ general keywords
  if (extractedProducts.length === 0) {
    const generalProducts = [
      'v·∫≠t li·ªáu x√¢y d·ª±ng',
      's·∫£n ph·∫©m s·ª≠a ch·ªØa nh√†',
      'thi·∫øt b·ªã x√¢y d·ª±ng'
    ];
    extractedProducts.push(...generalProducts);
  }

  // Remove duplicates v√† limit
  return [...new Set(extractedProducts)].slice(0, 3);
};