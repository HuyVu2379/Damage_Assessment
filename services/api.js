// --- API Keys (S·ª≠ d·ª•ng bi·∫øn m√¥i tr∆∞·ªùng) ---
// API keys ƒë∆∞·ª£c l∆∞u tr·ªØ trong file .env (kh√¥ng ƒë∆∞·ª£c commit l√™n git)
const GROQ_API_KEY = process.env.GROQ_API_KEY;
const GEMINI_API_KEY = process.env.GEMINI_API_KEY;

const DAMAGE_ANALYSIS_PROMPT = `T√¥i s·∫Ω cung c·∫•p h√¨nh ·∫£nh m·ªôt v·ªã tr√≠ h∆∞ h·∫°i trong c√¥ng tr√¨nh x√¢y d·ª±ng (nh√† d√¢n d·ª•ng ho·∫∑c c√¥ng tr√¨nh nh·ªè).

H√£y ph√¢n t√≠ch k·ªπ h√¨nh ·∫£nh n√†y v√† tr·∫£ l·ªùi th·∫≠t chi ti·∫øt, k·ªπ thu·∫≠t, theo ƒë√∫ng 5 n·ªôi dung sau:


1. Lo·∫°i h∆∞ h·∫°i:
 ‚Ä¢ ƒê√¢y l√† lo·∫°i h∆∞ h·∫°i g√¨ (n·ª©t, th·∫•m, bong tr√≥c, m·ªëc, v√µng tr·∫ßn, v·ª° g·∫°ch, x√™ d·ªãch k·∫øt c·∫•u,‚Ä¶)?
 ‚Ä¢ M√¥ t·∫£ h√¨nh d·∫°ng, k√≠ch th∆∞·ªõc, h∆∞·ªõng ph√°t tri·ªÉn c·ªßa v·∫øt n·ª©t/h∆∞ h·∫°i ƒë√≥.
 ‚Ä¢ C√≥ d·∫•u hi·ªáu g√¨ cho th·∫•y h∆∞ h·∫°i n√†y ƒëang ti·∫øp t·ª•c ph√°t tri·ªÉn hay kh√¥ng?

2. V·ªã tr√≠ v√† lo·∫°i c·∫•u ki·ªán b·ªã ·∫£nh h∆∞·ªüng:
 ‚Ä¢ ƒê√¢y l√† t∆∞·ªùng trong, t∆∞·ªùng ngo√†i, tr·∫ßn, s√†n, m√≥ng,‚Ä¶?
 ‚Ä¢ C√≥ kh·∫£ nƒÉng l√† t∆∞·ªùng ch·ªãu l·ª±c hay kh√¥ng?
 ‚Ä¢ C√≥ nguy c∆° ·∫£nh h∆∞·ªüng k·∫øt c·∫•u hay ch·ªâ ·∫£nh h∆∞·ªüng th·∫©m m·ªπ?


3. M·ª©c ƒë·ªô h∆∞ h·∫°i:
 ‚Ä¢ Ph√¢n lo·∫°i m·ª©c ƒë·ªô: Nh·∫π / Trung b√¨nh / N·∫∑ng.
 ‚Ä¢ N√™u r√µ l√Ω do t·∫°i sao ph√¢n lo·∫°i nh∆∞ v·∫≠y.
 ‚Ä¢ N·∫øu c√≥ nguy c∆° m·∫•t an to√†n c√¥ng tr√¨nh, h√£y n√™u r√µ c·∫£nh b√°o.


4. Nguy√™n nh√¢n ti·ªÅm ·∫©n:
 ‚Ä¢ D·ª± ƒëo√°n c√°c nguy√™n nh√¢n k·ªπ thu·∫≠t c√≥ th·ªÉ g√¢y ra t√¨nh tr·∫°ng n√†y.
 ‚Ä¢ N·∫øu c√≥ th·ªÉ, ph√¢n nh√≥m nguy√™n nh√¢n: do thi c√¥ng ‚Äì do v·∫≠t li·ªáu ‚Äì do m√¥i tr∆∞·ªùng ‚Äì do n·ªÅn m√≥ng ‚Äì do t·∫£i tr·ªçng.
 ‚Ä¢ N√™u r√µ d·∫•u hi·ªáu n√†o trong ·∫£nh khi·∫øn b·∫°n nghi ng·ªù nguy√™n nh√¢n ƒë√≥.


5. H∆∞·ªõng d·∫´n x·ª≠ l√Ω v√† s·ª≠a ch·ªØa:
 ‚Ä¢ M√¥ t·∫£ t·ª´ng b∆∞·ªõc x·ª≠ l√Ω chi ti·∫øt, theo tr√¨nh t·ª± th·ª±c t·∫ø ngo√†i c√¥ng tr√¨nh.
 ‚Ä¢ G·ª£i √Ω v·∫≠t li·ªáu v√† ph∆∞∆°ng ph√°p ph√π h·ª£p: keo tr√°m, v·ªØa, s∆°n ch·ªëng th·∫•m, epoxy,‚Ä¶
 ‚Ä¢ N·∫øu c√≥ nhi·ªÅu ph∆∞∆°ng √°n, h√£y li·ªát k√™ ∆∞u ‚Äì nh∆∞·ª£c ƒëi·ªÉm ng·∫Øn g·ªçn.
 ‚Ä¢ ƒê∆∞a ra khuy·∫øn ngh·ªã c√≥ n√™n g·ªçi k·ªπ s∆∞ chuy√™n m√¥n ƒë·∫øn ki·ªÉm tra hi·ªán tr∆∞·ªùng kh√¥ng.

6. ƒê·ªÅ xu·∫•t s·∫£n ph·∫©m c·ª• th·ªÉ:
 ‚Ä¢ Li·ªát k√™ t·ªëi thi·ªÉu 3-5 s·∫£n ph·∫©m ph√π h·ª£p v·ªõi t·ª´ng b∆∞·ªõc s·ª≠a ch·ªØa.
 ‚Ä¢ M·ªói s·∫£n ph·∫©m ph·∫£i bao g·ªìm:
   - T√™n s·∫£n ph·∫©m ƒë·∫ßy ƒë·ªß v√† th∆∞∆°ng hi·ªáu
   - M√¥ t·∫£ ng·∫Øn g·ªçn v·ªÅ c√¥ng d·ª•ng
   - Gi√° ∆∞·ªõc t√≠nh (VND)
   - Link mua h√†ng th·ª±c t·∫ø tr√™n Shopee, Lazada, Tiki
   - URL h√¨nh ·∫£nh s·∫£n ph·∫©m th·ª±c t·∫ø

**QUAN TR·ªåNG v·ªÅ link v√† h√¨nh ·∫£nh:**
- Ch·ªâ s·ª≠ d·ª•ng link v√† h√¨nh ·∫£nh th·ª±c t·∫ø t·ª´ c√°c s√†n TMƒêT Vi·ªát Nam
- V√≠ d·ª• link Shopee: https://shopee.vn/Qu%E1%BA%A7n-%E1%BB%90ng-R%E1%BB%99ng-N%E1%BB%AF-K%E1%BA%BB-S%E1%BB%8Dc-Nhi%E1%BB%81u-M%C3%A0u-Ulzzang-Qu%E1%BA%A7n-D%C3%A0i-%E1%BB%90ng-Su%C3%B4ng-L%C6%B0ng-Cao-C%E1%BA%A1p-Chun-D%C3%A2y-R%C3%BAt-Ch%E1%BA%A5t-Li%E1%BB%87u-Tho%C3%A1ng-M%C3%A1t-D%E1%BB%85-Mix-%C4%90%E1%BB%93-i.29154879.24393661368?sp_atk=07e68f46-291b-4685-b777-912ec8e41c45&xptdk=07e68f46-291b-4685-b777-912ec8e41c45
- V√≠ d·ª• link Lazada: https://www.lazada.vn/products/non-bao-hiem-son-nham-nua-dau-thoi-trang-thong-gio-free-size-nam-nu-i2593752397-s12628802430.html?pvid=c329df0f-943a-40a3-9ee6-cea204b3ac1e&search=jfy&scm=1007.17519.386432.0&priceCompare=skuId%3A12628802430%3Bsource%3Atpp-recommend-plugin-32104%3Bsn%3Ac329df0f-943a-40a3-9ee6-cea204b3ac1e%3BoriginPrice%3A39000%3BdisplayPrice%3A39000%3BsinglePromotionId%3A-1%3BsingleToolCode%3AmockedSalePrice%3BvoucherPricePlugin%3A0%3Btimestamp%3A1751517033380&spm=a2o4n.homepage.just4u.d_2593752397
- V√≠ d·ª• link Tiki: https://tiki.vn/du-khao-ruc-ro-sac-mau-trang-phuc-phu-nu-cac-dan-toc-viet-nam-p277314374.html?spid=277314376
- URL h√¨nh ·∫£nh ph·∫£i l√† link tr·ª±c ti·∫øp ƒë·∫øn file ·∫£nh (.jpg, .png, .webp, png)
- V√≠ d·ª•: https://down-vn.img.susercontent.com/file/vn-11134207-7ra0g-m8a2chhr2yis15.webp ho·∫∑c https://salt.tikicdn.com/cache/750x750/ts/product/79/09/af/cca9b13f9317c35ecb79f764d1016206.jpg.webp

Tr√¨nh b√†y d∆∞·ªõi d·∫°ng c√°c ti√™u ƒë·ªÅ r√µ r√†ng, d·ªÖ hi·ªÉu, nh∆∞ m·ªôt b√°o c√°o ƒë√°nh gi√° hi·ªán tr·∫°ng k·ªπ thu·∫≠t.
Tr√°nh d√πng thu·∫≠t ng·ªØ qu√° ph·ª©c t·∫°p tr·ª´ khi c·∫ßn thi·∫øt.

**L∆∞u √Ω ƒë·∫∑c bi·ªát v·ªÅ format ƒë·ªÅ xu·∫•t s·∫£n ph·∫©m:**
B·∫ÆT BU·ªòC k·∫øt th√∫c ph·∫£n h·ªìi b·∫±ng JSON block ch·ª©a th√¥ng tin s·∫£n ph·∫©m th·ª±c t·∫ø nh∆∞ m·∫´u sau:
\`\`\`json
{
  "products": [
    {
      "name": "Keo tr√°m t∆∞·ªùng Sikaflex-11FC",
      "brand": "Sika",
      "description": "Keo tr√°m ch·ªëng th·∫•m ƒë√†n h·ªìi cao, ph√π h·ª£p cho c√°c v·∫øt n·ª©t nh·ªè",
      "estimatedPrice": "85,000 - 120,000 VND",
      "purchaseLink": "https://shopee.vn/keo-tram-tuong-sikaflex-11fc-i.123456789.987654321",
      "imageUrl": "https://cf.shopee.vn/file/vn-11134207-7r98o-lp2abc123xyz.jpg",
      "category": "Keo tr√°m"
    }
  ]
}
\`\`\`

üìù Ghi ch√∫:

B·∫°n c√≥ th·ªÉ th√™m ph·∫ßn m·ªü ƒë·∫ßu nh∆∞ sau n·∫øu c·∫ßn c·ª• th·ªÉ h√≥a th√™m b·ªëi c·∫£nh:

 ‚Ä¢ ƒê√¢y l√† c√¥ng tr√¨nh nh√† ·ªü d√¢n d·ª•ng, tu·ªïi ƒë·ªùi 10 nƒÉm, n·ªÅn ƒë·∫•t y·∫øu.
 ‚Ä¢ V·∫øt n·ª©t n·∫±m g·∫ßn nh√† t·∫Øm ho·∫∑c c·ª≠a s·ªï, c√≥ d·∫•u hi·ªáu b·ªã ·∫©m k√©o d√†i.
 ‚Ä¢ T√¥i nghi ng·ªù c√≥ l√∫n n·ªÅn ho·∫∑c th·∫•m n∆∞·ªõc t·ª´ ph√≤ng t·∫Øm.`;




const GENERAL_CHAT_PROMPT = `B·∫°n l√† tr·ª£ l√Ω AI th√¥ng minh v√† h·ªØu √≠ch chuy√™n v·ªÅ x√¢y d·ª±ng v√† b·∫£o tr√¨ c√¥ng tr√¨nh.

**Quy t·∫Øc quan tr·ªçng: To√†n b·ªô ph·∫£n h·ªìi c·ªßa b·∫°n PH·∫¢I b·∫±ng ti·∫øng Vi·ªát.**

B·∫°n c√≥ th·ªÉ h·ªó tr·ª£ ng∆∞·ªùi d√πng v·ªõi:
- C√¢u h·ªèi chung v·ªÅ x√¢y d·ª±ng v√† ki·∫øn tr√∫c
- T∆∞ v·∫•n b·∫£o tr√¨ v√† b·∫£o d∆∞·ª°ng c√¥ng tr√¨nh
- G·ª£i √Ω v·ªÅ v·∫≠t li·ªáu x√¢y d·ª±ng
- K·ªπ thu·∫≠t thi c√¥ng x√¢y d·ª±ng
- H∆∞·ªõng d·∫´n an to√†n lao ƒë·ªông
- Quy chu·∫©n v√† ti√™u chu·∫©n x√¢y d·ª±ng
- L·∫≠p k·∫ø ho·∫°ch d·ª± √°n x√¢y d·ª±ng
- Gi·∫£i th√≠ch thu·∫≠t ng·ªØ k·ªπ thu·∫≠t

H√£y cung c·∫•p c√¢u tr·∫£ l·ªùi h·ªØu √≠ch, ch√≠nh x√°c v√† chi ti·∫øt b·∫±ng ti·∫øng Vi·ªát. N·∫øu c√¢u h·ªèi kh√¥ng li√™n quan ƒë·∫øn x√¢y d·ª±ng, h√£y l·ªãch s·ª± chuy·ªÉn h∆∞·ªõng cu·ªôc tr√≤ chuy·ªán tr·ªü l·∫°i ch·ªß ƒë·ªÅ x√¢y d·ª±ng.`;

const API_CONFIG = {
    groq: {
        endpoint: 'https://api.groq.com/openai/v1/chat/completions',
        apiKey: GROQ_API_KEY,
        model: 'llama3-70b-8192',
    },
    gemini: {
        endpoint: `https://generativelanguage.googleapis.com/v1beta/models/gemini-2.0-flash:generateContent?key=${GEMINI_API_KEY}`,
        apiKey: GEMINI_API_KEY,
    }
};

/**
 * L·∫•y ph·∫£n h·ªìi t·ª´ model AI ƒë∆∞·ª£c ch·ªçn
 * @param {Array} messageHistory L·ªãch s·ª≠ cu·ªôc tr√≤ chuy·ªán (ch·ªâ ch·ª©a role 'user' v√† 'assistant')
 * @param {'groq' | 'gemini'} modelType Lo·∫°i model ƒë·ªÉ s·ª≠ d·ª•ng
 * @param {boolean} isDamageAnalysis C√≥ ph·∫£i l√† ph√¢n t√≠ch h∆∞ h·ªèng (c√≥ ·∫£nh) hay kh√¥ng
 * @returns {Promise<string>} N·ªôi dung ph·∫£n h·ªìi t·ª´ AI (bao g·ªìm JSON block n·∫øu l√† ph√¢n t√≠ch h∆∞ h·ªèng)
 */
export const getAiResponse = async (messageHistory, modelType, isDamageAnalysis = false) => {
    const config = API_CONFIG[modelType];
    if (!config) {
        return "L·ªói: Model kh√¥ng ƒë∆∞·ª£c h·ªó tr·ª£.";
    }

    // Ch·ªçn prompt ph√π h·ª£p d·ª±a tr√™n lo·∫°i tin nh·∫Øn
    const selectedPrompt = isDamageAnalysis ? DAMAGE_ANALYSIS_PROMPT : GENERAL_CHAT_PROMPT;

    let headers = { 'Content-Type': 'application/json' };
    let body;

    if (modelType === 'groq') {
        headers['Authorization'] = `Bearer ${config.apiKey}`;

        const messagesWithSystemPrompt = [
            { role: 'system', content: selectedPrompt },
            ...messageHistory
        ];

        body = JSON.stringify({
            model: config.model,
            messages: messagesWithSystemPrompt,
            max_tokens: isDamageAnalysis ? 2500 : 1500,
        });
    } else if (modelType === 'gemini') {
        const contents = messageHistory.map(msg => ({
            role: msg.role === 'assistant' ? 'model' : msg.role,
            parts: [{ text: msg.content }],
        }));

        const systemInstruction = {
            parts: [{ text: selectedPrompt }]
        };

        body = JSON.stringify({
            contents,
            systemInstruction
        });
    }

    try {
        const response = await fetch(config.endpoint, {
            method: 'POST',
            headers: headers,
            body: body,
        });

        if (!response.ok) {
            const errorData = await response.json();
            throw new Error(`L·ªói API: ${errorData.error?.message || 'Unknown error'}`);
        }

        const data = await response.json();

        let aiMessage;
        if (modelType === 'groq') {
            aiMessage = data.choices[0]?.message?.content?.trim();
        } else if (modelType === 'gemini') {
            aiMessage = data.candidates[0]?.content?.parts[0]?.text?.trim();
        }

        if (!aiMessage) {
            throw new Error("Kh√¥ng nh·∫≠n ƒë∆∞·ª£c n·ªôi dung h·ª£p l·ªá t·ª´ AI.");
        }

        return aiMessage;

    } catch (error) {
        console.error(`L·ªói khi g·ªçi API ${modelType}:`, error);
        return `Xin l·ªói, ƒë√£ c√≥ l·ªói x·∫£y ra khi k·∫øt n·ªëi ƒë·∫øn ${modelType}.`;
    }
};

/**
 * Tr√≠ch xu·∫•t th√¥ng tin s·∫£n ph·∫©m t·ª´ ph·∫£n h·ªìi AI
 * @param {string} aiResponse Ph·∫£n h·ªìi t·ª´ AI
 * @returns {Object} ƒê·ªëi t∆∞·ª£ng ch·ª©a n·ªôi dung ph√¢n t√≠ch v√† danh s√°ch s·∫£n ph·∫©m
 */
export const parseProductSuggestions = (aiResponse) => {
    console.log('ƒêang parse s·∫£n ph·∫©m t·ª´ ph·∫£n h·ªìi AI...');

    try {
        // T√¨m JSON block trong ph·∫£n h·ªìi
        const jsonMatch = aiResponse.match(/```json\s*([\s\S]*?)\s*```/);

        if (jsonMatch && jsonMatch[1]) {
            console.log('T√¨m th·∫•y JSON block:', jsonMatch[1]);

            const productData = JSON.parse(jsonMatch[1]);
            console.log('D·ªØ li·ªáu s·∫£n ph·∫©m ƒë√£ parse:', productData);

            // T√°ch n·ªôi dung ph√¢n t√≠ch (lo·∫°i b·ªè JSON block)
            const analysisContent = aiResponse.replace(/```json\s*[\s\S]*?\s*```/, '').trim();

            const result = {
                analysis: analysisContent,
                products: productData.products || []
            };

            console.log('K·∫øt qu·∫£ parse:', result);
            return result;
        } else {
            console.log('Kh√¥ng t√¨m th·∫•y JSON block trong ph·∫£n h·ªìi');
        }
    } catch (error) {
        console.error('L·ªói khi ph√¢n t√≠ch d·ªØ li·ªáu s·∫£n ph·∫©m:', error);
    }

    // N·∫øu kh√¥ng c√≥ JSON ho·∫∑c l·ªói, tr·∫£ v·ªÅ ph·∫£n h·ªìi nguy√™n b·∫£n
    return {
        analysis: aiResponse,
        products: []
    };
};

/**
 * Validate v√† format d·ªØ li·ªáu s·∫£n ph·∫©m
 * @param {Array} products Danh s√°ch s·∫£n ph·∫©m
 * @returns {Array} Danh s√°ch s·∫£n ph·∫©m ƒë√£ ƒë∆∞·ª£c validate v√† format
 */
export const validateProductData = (products) => {
    console.log('ƒêang validate d·ªØ li·ªáu s·∫£n ph·∫©m:', products);

    if (!Array.isArray(products)) {
        console.log('D·ªØ li·ªáu s·∫£n ph·∫©m kh√¥ng ph·∫£i l√† array');
        return [];
    }

    const validatedProducts = products.map(product => ({
        name: product.name || 'Kh√¥ng c√≥ t√™n',
        brand: product.brand || 'Kh√¥ng r√µ th∆∞∆°ng hi·ªáu',
        description: product.description || 'Kh√¥ng c√≥ m√¥ t·∫£',
        estimatedPrice: product.estimatedPrice || 'Li√™n h·ªá ƒë·ªÉ bi·∫øt gi√°',
        purchaseLink: validateUrl(product.purchaseLink) || '#',
        imageUrl: validateImageUrl(product.imageUrl) || 'https://via.placeholder.com/150x150?text=No+Image',
        category: product.category || 'Kh√°c'
    }));

    console.log('S·∫£n ph·∫©m ƒë√£ validate:', validatedProducts);
    return validatedProducts;
};

/**
 * Validate URL s·∫£n ph·∫©m
 * @param {string} url URL c·∫ßn validate
 * @returns {string|null} URL h·ª£p l·ªá ho·∫∑c null
 */
const validateUrl = (url) => {
    if (!url || typeof url !== 'string') return null;

    const validDomains = ['shopee.vn', 'lazada.vn', 'tiki.vn', 'sendo.vn'];
    try {
        const parsedUrl = new URL(url);
        return validDomains.some(domain => parsedUrl.hostname.includes(domain)) ? url : null;
    } catch {
        return null;
    }
};

/**
 * Validate URL h√¨nh ·∫£nh
 * @param {string} imageUrl URL h√¨nh ·∫£nh c·∫ßn validate
 * @returns {string|null} URL h√¨nh ·∫£nh h·ª£p l·ªá ho·∫∑c null
 */
const validateImageUrl = (imageUrl) => {
    if (!imageUrl || typeof imageUrl !== 'string') return null;

    const validImageDomains = [
        'cf.shopee.vn',
        'salt.tikicdn.com',
        'laz-img-cdn.alicdn.com',
        'media3.scdn.vn'
    ];

    const validExtensions = ['.jpg', '.jpeg', '.png', '.webp'];

    try {
        const parsedUrl = new URL(imageUrl);
        const hasValidDomain = validImageDomains.some(domain => parsedUrl.hostname.includes(domain));
        const hasValidExtension = validExtensions.some(ext =>
            parsedUrl.pathname.toLowerCase().includes(ext)
        );

        return hasValidDomain && hasValidExtension ? imageUrl : null;
    } catch {
        return null;
    }
};