import * as FileSystem from 'expo-file-system';

// --- API Keys (S·ª≠ d·ª•ng bi·∫øn m√¥i tr∆∞·ªùng) ---
// API keys ƒë∆∞·ª£c l∆∞u tr·ªØ trong file .env (kh√¥ng ƒë∆∞·ª£c commit l√™n git)
const GROQ_API_KEY = process.env.GROQ_API_KEY;
const GEMINI_API_KEY = process.env.GEMINI_API_KEY;

// Prompt cho ph√¢n t√≠ch ·∫£nh t·ªïng qu√°t
const IMAGE_ANALYSIS_PROMPT = `·∫¢nh n√†y c√≥ g√¨? Tr·∫£ l·ªùi b·∫±ng c√°ch li·ªát k√™ t√™n t·ª´ng v·∫≠t th·ªÉ nh√¨n th·∫•y k√®m v·ªã tr√≠ (tr√°i, ph·∫£i, gi·ªØa,...). ƒê·ª´ng ph·ªèng ƒëo√°n n·∫øu kh√¥ng ch·∫Øc ch·∫Øn.`;

const DAMAGE_ANALYSIS_PROMPT = `B·∫†N L√Ä CHUY√äN GIA KI·ªÇM ƒê·ªäNH C√îNG TR√åNH X√ÇY D·ª∞NG.

NHI·ªÜM V·ª§: Ph√¢n t√≠ch t√¨nh tr·∫°ng c√°c c·∫•u ki·ªán x√¢y d·ª±ng trong ·∫£nh.

B∆Ø·ªöC 1: NH·∫¨N DI·ªÜN C·∫§U KI·ªÜN
X√°c ƒë·ªãnh c√°c c·∫•u ki·ªán x√¢y d·ª±ng c√≥ trong ·∫£nh:
- T∆∞·ªùng (g·∫°ch, b√™ t√¥ng, th·∫°ch cao)
- Tr·∫ßn nh√† (b√™ t√¥ng, th·∫°ch cao, t·∫•m l·ª£p)
- S√†n (g·∫°ch men, b√™ t√¥ng, g·ªó)
- C·ªôt, d·∫ßm (b√™ t√¥ng c·ªët th√©p, th√©p)
- M√°i, khung k·∫øt c·∫•u

B∆Ø·ªöC 2: ƒê√ÅNH GI√Å T√åNH TR·∫†NG
Cho m·ªói c·∫•u ki·ªán, ph√¢n lo·∫°i:

‚úÖ **B√åNH TH∆Ø·ªúNG**: Kh√¥ng c√≥ d·∫•u hi·ªáu h∆∞ h·ªèng
- B·ªÅ m·∫∑t ph·∫≥ng, kh√¥ng n·ª©t
- M√†u s·∫Øc ƒë·ªìng ƒë·ªÅu
- Kh√¥ng c√≥ v·∫øt ·∫©m m·ªëc

‚ö†Ô∏è **H∆Ø H·ªéNG NH·∫∏**: 
- N·ª©t nh·ªè (< 2mm)
- Bong tr√≥c s∆°n nh·∫π
- ·∫®m m·ªëc c·ª•c b·ªô
- Phai m√†u

üö® **H∆Ø H·ªéNG N·∫∂NG**:
- N·ª©t l·ªõn (> 2mm)
- Bong tr√≥c v·ªØa/b√™ t√¥ng
- Th·∫•m n∆∞·ªõc r√µ r·ªát
- Cong v√™nh, s·ª•t l√∫n

B∆Ø·ªöC 3: TR·∫¢ L·ªúI
Format: 
**[T√™n c·∫•u ki·ªán]**: [T√¨nh tr·∫°ng] - [M√¥ t·∫£ chi ti·∫øt]

V√ç D·ª§:
**T∆∞·ªùng g·∫°ch**: ‚úÖ B√åNH TH∆Ø·ªúNG - T∆∞·ªùng c√≥ m√†u tr·∫Øng ƒë·ªìng ƒë·ªÅu, b·ªÅ m·∫∑t ph·∫≥ng, kh√¥ng c√≥ v·∫øt n·ª©t hay ·∫©m m·ªëc.
**Tr·∫ßn b√™ t√¥ng**: ‚ö†Ô∏è H∆Ø H·ªéNG NH·∫∏ - C√≥ m·ªôt s·ªë v·∫øt n·ª©t nh·ªè d√†i kho·∫£ng 30cm, c·∫ßn theo d√µi.

QUAN TR·ªåNG: H√£y ph√¢n t√≠ch th·∫≠t k·ªπ v√† trung th·ª±c v·ªÅ t√¨nh tr·∫°ng th·ª±c t·∫ø c·ªßa t·ª´ng c·∫•u ki·ªán.`;


const GENERAL_CHAT_PROMPT = `B·∫°n l√† tr·ª£ l√Ω AI th√¥ng minh v√† h·ªØu √≠ch chuy√™n v·ªÅ x√¢y d·ª±ng v√† b·∫£o tr√¨ c√¥ng tr√¨nh.

**Quy t·∫Øc quan tr·ªçng: To√†n b·ªô ph·∫£n h·ªìi c·ªßa b·∫°n PH·∫¢I b·∫±ng ti·∫øng Vi·ªát.**

B·∫°n c√≥ th·ªÉ h·ªó tr·ª£ ng∆∞·ªùi d√πng v·ªõi:
- C√¢u h·ªèi chung v·ªÅ x√¢y d·ª±ng v√† ki·∫øn tr√∫c
- T∆∞ v·∫•n b·∫£o tr√¨ v√† b·∫£o d∆∞·ª°ng c√¥ng tr√¨nh
- G·ª£i √Ω v·ªÅ v·∫≠t li·ªáu x√¢y d·ª±ng
- K·ªπ thu·∫≠t thi c√¥ng x√¢y d·ª±ng
- H∆∞·ªõng d·∫´n an to√†n lao ƒë·ªông
- Quy chu·∫©n v√† ti√™u chu·∫©n x√¢y d·ª±ng
- L·∫≠p k·∫ø ho·∫°ch d·ª± √°n x√¢y d·ª±ng
- Gi·∫£i th√≠ch thu·∫≠t ng·ªØ k·ªπ thu·∫≠t

H√£y cung c·∫•p c√¢u tr·∫£ l·ªùi h·ªØu √≠ch, ch√≠nh x√°c v√† chi ti·∫øt b·∫±ng ti·∫øng Vi·ªát. N·∫øu c√¢u h·ªèi kh√¥ng li√™n quan ƒë·∫øn x√¢y d·ª±ng, h√£y l·ªãch s·ª± chuy·ªÉn h∆∞·ªõng cu·ªôc tr√≤ chuy·ªán tr·ªü l·∫°i ch·ªß ƒë·ªÅ x√¢y d·ª±ng.`;

const API_CONFIG = {
    groq: {
        endpoint: 'https://api.groq.com/openai/v1/chat/completions',
        apiKey: GROQ_API_KEY,
        model: 'llama3-70b-8192',
    },
    gemini: {
        endpoint: `https://generativelanguage.googleapis.com/v1beta/models/gemini-2.0-flash:generateContent?key=${GEMINI_API_KEY}`,
        apiKey: GEMINI_API_KEY,
    },
    'gemini-vision': {
        endpoint: `https://generativelanguage.googleapis.com/v1beta/models/gemini-1.5-flash:generateContent?key=${GEMINI_API_KEY}`,
        apiKey: GEMINI_API_KEY,
    }
};

/**
 * Ph√¢n t√≠ch ·∫£nh v·ªõi Gemini Pro Vision
 * @param {string} imageBase64 ·∫¢nh ƒë√£ ƒë∆∞·ª£c encode th√†nh Base64
 * @param {string} prompt Prompt ƒë·ªÉ ph√¢n t√≠ch ·∫£nh (m·∫∑c ƒë·ªãnh l√† ph√¢n t√≠ch t·ªïng qu√°t)
 * @returns {Promise<string>} K·∫øt qu·∫£ ph√¢n t√≠ch ·∫£nh
 */
export const analyzeImageWithGemini = async (imageBase64, prompt = IMAGE_ANALYSIS_PROMPT) => {
    const config = API_CONFIG['gemini-vision'];
    
    try {
        // Lo·∫°i b·ªè data URL prefix n·∫øu c√≥
        const base64Data = imageBase64.replace(/^data:image\/[a-z]+;base64,/, '');
        
        const body = JSON.stringify({
            contents: [
                {
                    parts: [
                        {
                            text: prompt
                        },
                        {
                            inline_data: {
                                mime_type: "image/jpeg",
                                data: base64Data
                            }
                        }
                    ]
                }
            ]
        });

        console.log('ƒêang g·ª≠i ·∫£nh ƒë·∫øn Gemini Pro Vision...');
        
        const response = await fetch(config.endpoint, {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json'
            },
            body: body
        });

        if (!response.ok) {
            const errorData = await response.json();
            console.error('Chi ti·∫øt l·ªói Gemini Vision:', errorData);
            throw new Error(`L·ªói API Gemini Vision: ${errorData.error?.message || 'Unknown error'}`);
        }

        const data = await response.json();
        console.log('Response t·ª´ Gemini Vision:', data);
        
        const aiMessage = data.candidates[0]?.content?.parts[0]?.text?.trim();

        if (!aiMessage) {
            throw new Error("Kh√¥ng nh·∫≠n ƒë∆∞·ª£c n·ªôi dung h·ª£p l·ªá t·ª´ Gemini Vision.");
        }

        console.log('Ph√¢n t√≠ch ·∫£nh th√†nh c√¥ng:', aiMessage);
        return aiMessage;

    } catch (error) {
        console.error('L·ªói khi ph√¢n t√≠ch ·∫£nh v·ªõi Gemini Vision:', error);
        return `Xin l·ªói, ƒë√£ c√≥ l·ªói x·∫£y ra khi ph√¢n t√≠ch ·∫£nh: ${error.message}`;
    }
};

/**
 * Chuy·ªÉn ƒë·ªïi ·∫£nh sang Base64
 * @param {string} uri URI c·ªßa ·∫£nh
 * @returns {Promise<string>} ·∫¢nh ƒë√£ ƒë∆∞·ª£c encode th√†nh Base64
 */
export const convertImageToBase64 = async (uri) => {
    try {
        console.log('ƒêang chuy·ªÉn ƒë·ªïi ·∫£nh sang Base64:', uri);
        const base64 = await FileSystem.readAsStringAsync(uri, {
            encoding: FileSystem.EncodingType.Base64,
        });
        console.log('Chuy·ªÉn ƒë·ªïi Base64 th√†nh c√¥ng');
        return base64;
    } catch (error) {
        console.error('L·ªói khi chuy·ªÉn ƒë·ªïi ·∫£nh sang Base64:', error);
        throw error;
    }
};

/**
 * L·∫•y ph·∫£n h·ªìi t·ª´ model AI ƒë∆∞·ª£c ch·ªçn
 * @param {Array} messageHistory L·ªãch s·ª≠ cu·ªôc tr√≤ chuy·ªán (ch·ªâ ch·ª©a role 'user' v√† 'assistant')
 * @param {'groq' | 'gemini' | 'gemini-vision'} modelType Lo·∫°i model ƒë·ªÉ s·ª≠ d·ª•ng
 * @param {boolean} isDamageAnalysis C√≥ ph·∫£i l√† ph√¢n t√≠ch h∆∞ h·ªèng (c√≥ ·∫£nh) hay kh√¥ng
 * @param {string} imageBase64 ·∫¢nh Base64 (ch·ªâ d√†nh cho gemini-vision)
 * @returns {Promise<string>} N·ªôi dung ph·∫£n h·ªìi t·ª´ AI (bao g·ªìm JSON block n·∫øu l√† ph√¢n t√≠ch h∆∞ h·ªèng)
 */
export const getAiResponse = async (messageHistory, modelType, isDamageAnalysis = false, imageBase64 = null) => {
    const config = API_CONFIG[modelType];
    if (!config) {
        return "L·ªói: Model kh√¥ng ƒë∆∞·ª£c h·ªó tr·ª£.";
    }

    // N·∫øu l√† gemini-vision v√† c√≥ ·∫£nh, s·ª≠ d·ª•ng function ri√™ng
    if (modelType === 'gemini-vision' && imageBase64) {
        const prompt = isDamageAnalysis ? DAMAGE_ANALYSIS_PROMPT : IMAGE_ANALYSIS_PROMPT;
        return await analyzeImageWithGemini(imageBase64, prompt);
    }

    // Ch·ªçn prompt ph√π h·ª£p d·ª±a tr√™n lo·∫°i tin nh·∫Øn
    const selectedPrompt = isDamageAnalysis ? DAMAGE_ANALYSIS_PROMPT : GENERAL_CHAT_PROMPT;

    let headers = { 'Content-Type': 'application/json' };
    let body;

    if (modelType === 'groq') {
        headers['Authorization'] = `Bearer ${config.apiKey}`;

        const messagesWithSystemPrompt = [
            { role: 'system', content: selectedPrompt },
            ...messageHistory
        ];

        body = JSON.stringify({
            model: config.model,
            messages: messagesWithSystemPrompt,
            max_tokens: isDamageAnalysis ? 2500 : 1500,
        });
    } else if (modelType === 'gemini') {
        const contents = messageHistory.map(msg => ({
            role: msg.role === 'assistant' ? 'model' : msg.role,
            parts: [{ text: msg.content }],
        }));

        const systemInstruction = {
            parts: [{ text: selectedPrompt }]
        };

        body = JSON.stringify({
            contents,
            systemInstruction
        });
    }

    try {
        const response = await fetch(config.endpoint, {
            method: 'POST',
            headers: headers,
            body: body,
        });

        if (!response.ok) {
            const errorData = await response.json();
            throw new Error(`L·ªói API: ${errorData.error?.message || 'Unknown error'}`);
        }

        const data = await response.json();

        let aiMessage;
        if (modelType === 'groq') {
            aiMessage = data.choices[0]?.message?.content?.trim();
        } else if (modelType === 'gemini') {
            aiMessage = data.candidates[0]?.content?.parts[0]?.text?.trim();
        }

        if (!aiMessage) {
            throw new Error("Kh√¥ng nh·∫≠n ƒë∆∞·ª£c n·ªôi dung h·ª£p l·ªá t·ª´ AI.");
        }

        return aiMessage;

    } catch (error) {
        console.error(`L·ªói khi g·ªçi API ${modelType}:`, error);
        return `Xin l·ªói, ƒë√£ c√≥ l·ªói x·∫£y ra khi k·∫øt n·ªëi ƒë·∫øn ${modelType}.`;
    }
};

/**
 * Tr√≠ch xu·∫•t th√¥ng tin s·∫£n ph·∫©m t·ª´ ph·∫£n h·ªìi AI
 * @param {string} aiResponse Ph·∫£n h·ªìi t·ª´ AI
 * @returns {Object} ƒê·ªëi t∆∞·ª£ng ch·ª©a n·ªôi dung ph√¢n t√≠ch v√† danh s√°ch s·∫£n ph·∫©m
 */
export const parseProductSuggestions = (aiResponse) => {
    console.log('ƒêang parse s·∫£n ph·∫©m t·ª´ ph·∫£n h·ªìi AI...');

    try {
        // T√¨m JSON block trong ph·∫£n h·ªìi
        const jsonMatch = aiResponse.match(/```json\s*([\s\S]*?)\s*```/);

        if (jsonMatch && jsonMatch[1]) {
            console.log('T√¨m th·∫•y JSON block:', jsonMatch[1]);

            const productData = JSON.parse(jsonMatch[1]);
            console.log('D·ªØ li·ªáu s·∫£n ph·∫©m ƒë√£ parse:', productData);

            // T√°ch n·ªôi dung ph√¢n t√≠ch (lo·∫°i b·ªè JSON block)
            const analysisContent = aiResponse.replace(/```json\s*[\s\S]*?\s*```/, '').trim();

            const result = {
                analysis: analysisContent,
                products: productData.products || []
            };

            console.log('K·∫øt qu·∫£ parse:', result);
            return result;
        } else {
            console.log('Kh√¥ng t√¨m th·∫•y JSON block trong ph·∫£n h·ªìi');
        }
    } catch (error) {
        console.error('L·ªói khi ph√¢n t√≠ch d·ªØ li·ªáu s·∫£n ph·∫©m:', error);
    }

    // N·∫øu kh√¥ng c√≥ JSON ho·∫∑c l·ªói, tr·∫£ v·ªÅ ph·∫£n h·ªìi nguy√™n b·∫£n
    return {
        analysis: aiResponse,
        products: []
    };
};

/**
 * Validate v√† format d·ªØ li·ªáu s·∫£n ph·∫©m
 * @param {Array} products Danh s√°ch s·∫£n ph·∫©m
 * @returns {Array} Danh s√°ch s·∫£n ph·∫©m ƒë√£ ƒë∆∞·ª£c validate v√† format
 */
export const validateProductData = (products) => {
    console.log('ƒêang validate d·ªØ li·ªáu s·∫£n ph·∫©m:', products);

    if (!Array.isArray(products)) {
        console.log('D·ªØ li·ªáu s·∫£n ph·∫©m kh√¥ng ph·∫£i l√† array');
        return [];
    }

    const validatedProducts = products.map(product => ({
        name: product.name || 'Kh√¥ng c√≥ t√™n',
        brand: product.brand || 'Kh√¥ng r√µ th∆∞∆°ng hi·ªáu',
        description: product.description || 'Kh√¥ng c√≥ m√¥ t·∫£',
        estimatedPrice: product.estimatedPrice || 'Li√™n h·ªá ƒë·ªÉ bi·∫øt gi√°',
        purchaseLink: validateUrl(product.purchaseLink) || '#',
        imageUrl: validateImageUrl(product.imageUrl) || 'https://via.placeholder.com/150x150?text=No+Image',
        category: product.category || 'Kh√°c'
    }));

    console.log('S·∫£n ph·∫©m ƒë√£ validate:', validatedProducts);
    return validatedProducts;
};

/**
 * Validate URL s·∫£n ph·∫©m
 * @param {string} url URL c·∫ßn validate
 * @returns {string|null} URL h·ª£p l·ªá ho·∫∑c null
 */
const validateUrl = (url) => {
    if (!url || typeof url !== 'string') return null;

    const validDomains = ['shopee.vn', 'lazada.vn', 'tiki.vn', 'sendo.vn'];
    try {
        const parsedUrl = new URL(url);
        return validDomains.some(domain => parsedUrl.hostname.includes(domain)) ? url : null;
    } catch {
        return null;
    }
};

/**
 * Validate URL h√¨nh ·∫£nh
 * @param {string} imageUrl URL h√¨nh ·∫£nh c·∫ßn validate
 * @returns {string|null} URL h√¨nh ·∫£nh h·ª£p l·ªá ho·∫∑c null
 */
const validateImageUrl = (imageUrl) => {
    if (!imageUrl || typeof imageUrl !== 'string') return null;

    const validImageDomains = [
        'cf.shopee.vn',
        'salt.tikicdn.com',
        'laz-img-cdn.alicdn.com',
        'media3.scdn.vn'
    ];

    const validExtensions = ['.jpg', '.jpeg', '.png', '.webp'];

    try {
        const parsedUrl = new URL(imageUrl);
        const hasValidDomain = validImageDomains.some(domain => parsedUrl.hostname.includes(domain));
        const hasValidExtension = validExtensions.some(ext =>
            parsedUrl.pathname.toLowerCase().includes(ext)
        );

        return hasValidDomain && hasValidExtension ? imageUrl : null;
    } catch {
        return null;
    }
};