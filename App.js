import React, { useState, useRef, useEffect, useMemo, useCallback } from 'react';
import {
  StyleSheet,
  View,
  FlatList,
  SafeAreaView,
  KeyboardAvoidingView,
  Platform,
  Alert,
  TouchableOpacity,
} from 'react-native';
import { Provider as PaperProvider } from 'react-native-paper';
import { IconButton } from 'react-native-paper';

// Components
import Header from './components/Header';
import MessageItem from './components/MessageItem';
import LoadingIndicator from './components/LoadingIndicator';
import CameraModal from './components/CameraModal';
import ImagePreview from './components/ImagePreview';
import ChatInput from './components/ChatInput';
import SidebarMenu from './components/SidebarMenu';

// Hooks
// import { useAudioRecording } from './hooks/useAudioRecording';
import { useCamera } from './hooks/useCamera';
import { useOptimizedInput } from './hooks/useDebounce';

// Utils
import { theme } from './utils/theme';
import { verticalScale, scale } from './utils/scaling';
import { convertImageToBase64 } from './utils/convert';

// API
import { getAiResponse, parseProductSuggestions, validateProductData, extractProductNames, searchMultipleProducts, isProductRelatedQuery, extractProductKeywordsFromQuery } from './services/api';
import { chatStorage } from './services/chatStorage';

const App = () => {
  const [messages, setMessages] = useState([
    { role: 'system', content: 'Ch√†o b·∫°n! T√¥i l√† chuy√™n gia x√¢y d·ª±ng AI. G·ª≠i ·∫£nh ho·∫∑c c√¢u h·ªèi, t√¥i s·∫Ω t·ª± ƒë·ªông nh·∫≠n di·ªán v√† t∆∞ v·∫•n ph√π h·ª£p!' },
  ]);

  // Optimize TextInput v·ªõi debounce
  const { displayValue: inputText, debouncedValue: debouncedInput, setValue: setInputText } = useOptimizedInput('', 100);

  const [isLoading, setIsLoading] = useState(false);
  const [pickedImage, setPickedImage] = useState(null);
  const [sidebarVisible, setSidebarVisible] = useState(false);
  const [shouldScrollToEnd, setShouldScrollToEnd] = useState(true);

  const flatListRef = useRef(null);
  const previousMessagesLength = useRef(messages.length);

  // Load cu·ªôc tr√≤ chuy·ªán cu·ªëi c√πng khi app kh·ªüi ƒë·ªông
  useEffect(() => {
    loadLastConversation();
  }, []);

  // FIX: Auto scroll to end when new messages are added
  useEffect(() => {
    if (messages.length > previousMessagesLength.current) {
      // Lu√¥n scroll khi c√≥ message m·ªõi
      const timeoutId = setTimeout(() => {
        flatListRef.current?.scrollToEnd({ animated: true });
        setShouldScrollToEnd(true);
      }, 150);

      return () => clearTimeout(timeoutId);
    }
    previousMessagesLength.current = messages.length;
  }, [messages]);

  // Auto-save cu·ªôc tr√≤ chuy·ªán hi·ªán t·∫°i khi c√≥ thay ƒë·ªïi
  useEffect(() => {
    if (messages.length > 1) {
      chatStorage.saveCurrentChat(messages);
    }
  }, [messages]);

  // Custom hooks
  // const {
  //   isRecording,
  //   startRecording,
  //   stopRecording
  // } = useAudioRecording(setInputText, setIsLoading);

  const {
    isCameraVisible,
    setIsCameraVisible,
    openCamera,
    takePicture,
    pickImage
  } = useCamera(setPickedImage);

  // Load cu·ªôc tr√≤ chuy·ªán cu·ªëi c√πng
  const loadLastConversation = async () => {
    const lastMessages = await chatStorage.loadCurrentChat();
    if (lastMessages && lastMessages.length > 1) {
      setMessages(lastMessages);
      setShouldScrollToEnd(true);
      // ƒê·∫£m b·∫£o scroll to bottom sau khi load v·ªõi nhi·ªÅu l·∫ßn th·ª≠
      setTimeout(() => {
        flatListRef.current?.scrollToEnd({ animated: false });
      }, 100);
      setTimeout(() => {
        flatListRef.current?.scrollToEnd({ animated: true });
      }, 300);
      setTimeout(() => {
        flatListRef.current?.scrollToEnd({ animated: false });
      }, 500);
    } else {
      // N·∫øu kh√¥ng c√≥ tin nh·∫Øn c≈©, ƒë·∫£m b·∫£o scroll cho tin nh·∫Øn h·ªá th·ªëng
      setShouldScrollToEnd(true);
      setTimeout(() => {
        flatListRef.current?.scrollToEnd({ animated: false });
      }, 200);
    }
  };

  // B·∫Øt ƒë·∫ßu cu·ªôc tr√≤ chuy·ªán m·ªõi
  const startNewChat = () => {
    setMessages([{ role: 'system', content: 'Ch√†o b·∫°n! T√¥i l√† chuy√™n gia x√¢y d·ª±ng AI. G·ª≠i ·∫£nh ho·∫∑c c√¢u h·ªèi, t√¥i s·∫Ω t·ª± ƒë·ªông nh·∫≠n di·ªán v√† t∆∞ v·∫•n ph√π h·ª£p!' }]);
    setInputText('');
    setPickedImage(null);
    setShouldScrollToEnd(true);
  };

  // Load cu·ªôc tr√≤ chuy·ªán ƒë√£ l∆∞u
  const loadConversation = (savedMessages) => {
    setMessages(savedMessages);
    setInputText('');
    setPickedImage(null);
    setShouldScrollToEnd(true);
    // Scroll to bottom sau khi load conversation v·ªõi retry
    setTimeout(() => {
      flatListRef.current?.scrollToEnd({ animated: false });
    }, 100);
    setTimeout(() => {
      flatListRef.current?.scrollToEnd({ animated: true });
    }, 300);
  };


  const handleSendMessage = async () => {
    if ((inputText.trim().length === 0 && !pickedImage) || isLoading) {
      return;
    }

    // ƒê·∫£m b·∫£o auto-scroll ƒë∆∞·ª£c b·∫≠t khi g·ª≠i tin nh·∫Øn
    setShouldScrollToEnd(true);

    let messageContent = inputText.trim();
    if (pickedImage && messageContent) {
      messageContent = `[ƒê√£ g·ª≠i 1 ·∫£nh] ${messageContent}`;
    } else if (pickedImage) {
      messageContent = `[ƒê√£ g·ª≠i 1 ·∫£nh]`;
    }

    const userMessage = {
      role: 'user',
      content: messageContent,
      imageUri: pickedImage
    };
    const newMessages = [...messages, userMessage];
    setMessages(newMessages);

    // L∆∞u tr·∫°ng th√°i c√≥ ·∫£nh - AI s·∫Ω t·ª± ƒë·ªông nh·∫≠n di·ªán v√† ph·∫£n h·ªìi ph√π h·ª£p
    const hasImage = !!pickedImage;

    setInputText('');
    setPickedImage(null);
    setIsLoading(true);

    try {
      let aiResponseContent;

      // T·ª± ƒë·ªông ch·ªçn model: c√≥ ·∫£nh d√πng gemini-vision, kh√¥ng c√≥ ·∫£nh d√πng gemini text
      if (hasImage) {
        try {
          const base64Image = await convertImageToBase64(pickedImage);

          // Chu·∫©n b·ªã context cho AI: bao g·ªìm c·∫£ l·ªãch s·ª≠ chat v√† c√¢u h·ªèi hi·ªán t·∫°i
          const contextMessages = newMessages
            .filter(msg => msg.role !== 'system')
            .map(msg => ({
              role: msg.role,
              content: msg.imageUri ? msg.content.replace(/\[ƒê√£ g·ª≠i 1 ·∫£nh\]\s*/, '') : msg.content
            }));

          // AI s·∫Ω t·ª± ƒë·ªông nh·∫≠n di·ªán v√† ph·∫£n h·ªìi ph√π h·ª£p v·ªõi c·∫£ ·∫£nh v√† text
          aiResponseContent = await getAiResponse(contextMessages, 'gemini-vision', true, base64Image);
        } catch (error) {
          console.error('L·ªói x·ª≠ l√Ω ·∫£nh:', error);
          aiResponseContent = 'Xin l·ªói, c√≥ l·ªói x·∫£y ra khi x·ª≠ l√Ω ·∫£nh. B·∫°n c√≥ th·ªÉ th·ª≠ l·∫°i kh√¥ng?';
        }
      } else {
        // Kh√¥ng c√≥ ·∫£nh: D√πng gemini text model cho chat th∆∞·ªùng
        const apiPayload = newMessages
          .filter(msg => msg.role !== 'system')
          .map(msg => ({ role: msg.role, content: msg.content }));

        aiResponseContent = await getAiResponse(apiPayload, 'gemini-vision', false, null);
      }

      // T·∫°o AI response message
      const aiResponseMessage = { role: 'assistant', content: aiResponseContent };
      setMessages(prev => [...prev, aiResponseMessage]);

      // CH·ªà t√¨m s·∫£n ph·∫©m khi AI ƒë√£ ƒë·ªÅ xu·∫•t s·∫£n ph·∫©m c·ª• th·ªÉ (c√≥ d√≤ng "S·∫£n ph·∫©m c·∫ßn:")
      setTimeout(async () => {
        try {
          // Extract t√™n s·∫£n ph·∫©m t·ª´ ph√¢n t√≠ch
          const productNames = extractProductNames(aiResponseContent);

          // CH·ªà x·ª≠ l√Ω n·∫øu AI ƒë√£ ƒë·ªÅ xu·∫•t s·∫£n ph·∫©m c·ª• th·ªÉ
          if (productNames.length > 0) {
            console.log('üõçÔ∏è AI ƒë√£ ƒë·ªÅ xu·∫•t s·∫£n ph·∫©m, t√¨m ki·∫øm v·ªõi SerpAPI...');
            setIsLoading(true);

            // T√¨m s·∫£n ph·∫©m th·∫≠t v·ªõi SerpAPI
            const products = await searchMultipleProducts(productNames);

            if (products.length > 0) {
              // Hi·ªÉn th·ªã tin nh·∫Øn s·∫£n ph·∫©m
              const productMessage = {
                role: 'assistant',
                content: 'üõí **S·∫£n ph·∫©m ƒë∆∞·ª£c ƒë·ªÅ xu·∫•t**\n\nD·ª±a tr√™n ph√¢n t√≠ch h∆∞ h·ªèng, ƒë√¢y l√† nh·ªØng s·∫£n ph·∫©m ph√π h·ª£p ƒë·ªÉ s·ª≠a ch·ªØa:',
                products: products
              };

              setMessages(prev => [...prev, productMessage]);
              console.log('‚úÖ Hi·ªÉn th·ªã s·∫£n ph·∫©m th√†nh c√¥ng');
            }

            setIsLoading(false);
          } else {
            // KH√îNG th√™m message g·ª£i √Ω n·∫øu AI kh√¥ng ƒë·ªÅ xu·∫•t s·∫£n ph·∫©m
            console.log('üìù AI kh√¥ng ƒë·ªÅ xu·∫•t s·∫£n ph·∫©m c·ª• th·ªÉ, kh√¥ng hi·ªÉn th·ªã g·ª£i √Ω');
          }
        } catch (productError) {
          console.error('‚ùå L·ªói t√¨m s·∫£n ph·∫©m:', productError);
          setIsLoading(false);
          // Silent fail - kh√¥ng hi·ªÉn th·ªã l·ªói cho user
        }

        // Force scroll to end
        setTimeout(() => {
          flatListRef.current?.scrollToEnd({ animated: true });
        }, 200);
      }, 1000);

      setIsLoading(false);

      // FIX: Force scroll to end sau khi c√≥ AI response
      setShouldScrollToEnd(true);
      setTimeout(() => {
        flatListRef.current?.scrollToEnd({ animated: true });
      }, 200);

    } catch (error) {
      console.error('‚ùå L·ªói x·ª≠ l√Ω tin nh·∫Øn:', error);
      setIsLoading(false);
      Alert.alert(
        'L·ªói x·ª≠ l√Ω tin nh·∫Øn',
        `C√≥ l·ªói x·∫£y ra: ${error.message}\n\nVui l√≤ng th·ª≠ l·∫°i.`,
        [{ text: 'OK', onPress: () => { } }]
      );
    }
  };

  // Test function ƒë·ªÉ ki·ªÉm tra hi·ªÉn th·ªã s·∫£n ph·∫©m
  const testProductDisplay = () => {
    const testProducts = [
      {
        name: 'Keo tr√°m Sikaflex',
        brand: 'Sika',
        description: 'Keo tr√°m ch·ªëng th·∫•m ch·∫•t l∆∞·ª£ng cao',
        estimatedPrice: '120.000 VND',
        category: 'V·∫≠t li·ªáu x√¢y d·ª±ng',
        imageUrl: 'https://example.com/sika.jpg',
        purchaseLink: '#'
      }
    ];

    const testMessage = {
      role: 'assistant',
      content: 'ƒê√¢y l√† tin nh·∫Øn test ƒë·ªÉ hi·ªÉn th·ªã s·∫£n ph·∫©m',
      products: testProducts
    };

    setMessages(prev => [...prev, testMessage]);
  };

  // Optimize renderMessageItem v·ªõi useCallback ƒë·ªÉ gi·∫£m re-render
  const renderMessageItem = useCallback(({ item, index }) => (
    <MessageItem
      item={item}
      index={index}
    />
  ), []); // Empty deps array v√¨ MessageItem ƒë√£ ƒë∆∞·ª£c memo v·ªõi custom comparison

  // Optimize keyExtractor
  const keyExtractor = useCallback((item, index) => {
    return `message-${index}-${item.role}`;
  }, []);

  const canSendMessage = inputText.trim().length > 0 || pickedImage;

  // H√†m scroll to end th·ªß c√¥ng - FIX c·∫£i ti·∫øn
  const scrollToEnd = useCallback(() => {
    // Ki·ªÉm tra ref c√≥ t·ªìn t·∫°i kh√¥ng
    if (!flatListRef.current) return;

    try {
      // Ph∆∞∆°ng ph√°p ƒë∆°n gi·∫£n v√† ·ªïn ƒë·ªãnh nh·∫•t
      flatListRef.current.scrollToEnd({ animated: true });

      // Set state sau m·ªôt delay ng·∫Øn ƒë·ªÉ tr√°nh conflict
      setTimeout(() => {
        setShouldScrollToEnd(true);
      }, 300);
    } catch (error) {
      // Fallback n·∫øu c√≥ l·ªói
      console.warn('Scroll error:', error);
    }
  }, []);

  // Handler ƒë·ªÉ ph√°t hi·ªán khi user scroll - FIX
  const handleScroll = useCallback((event) => {
    const { layoutMeasurement, contentOffset, contentSize } = event.nativeEvent;

    // Ki·ªÉm tra n·∫øu content size nh·ªè h∆°n layout th√¨ lu√¥n ·ªü bottom
    if (contentSize.height <= layoutMeasurement.height) {
      setShouldScrollToEnd(true);
      return;
    }

    // Ki·ªÉm tra c√≥ ƒëang ·ªü cu·ªëi kh√¥ng v·ªõi threshold ch√≠nh x√°c h∆°n
    const distanceFromBottom = contentSize.height - (layoutMeasurement.height + contentOffset.y);
    const isAtBottom = distanceFromBottom <= 100; // TƒÉng threshold l√™n 100px ƒë·ªÉ d·ªÖ detect h∆°n

    // Ch·ªâ update state khi c√≥ thay ƒë·ªïi th·ª±c s·ª± ƒë·ªÉ tr√°nh re-render kh√¥ng c·∫ßn thi·∫øt
    setShouldScrollToEnd(prev => prev !== isAtBottom ? isAtBottom : prev);
  }, []);

  return (
    <PaperProvider theme={theme}>
      <SafeAreaView style={styles.container}>
        {/* Sidebar Menu */}
        <SidebarMenu
          visible={sidebarVisible}
          onClose={() => setSidebarVisible(false)}
          onNewChat={startNewChat}
          onLoadConversation={loadConversation}
          currentMessages={messages}
          theme={theme}
        />

        {/* Camera Modal */}
        <CameraModal
          visible={isCameraVisible}
          onClose={() => setIsCameraVisible(false)}
          onTakePicture={takePicture}
          onPickImage={pickImage}
        />

        {/* Header */}
        <Header
          onNewChat={() => setSidebarVisible(true)}
          theme={theme}
        />

        <View style={styles.mainContainer}>
          <FlatList
            ref={flatListRef}
            data={messages}
            renderItem={renderMessageItem}
            keyExtractor={keyExtractor}
            style={styles.chatMessages}
            contentContainerStyle={{ paddingVertical: verticalScale(10) }}
            ListFooterComponent={isLoading ? <LoadingIndicator theme={theme} /> : null}
            onScroll={handleScroll}
            scrollEventThrottle={200} // TƒÉng t·ª´ 100 l√™n 200 ƒë·ªÉ gi·∫£m t·∫ßn su·∫•t event

            // Performance optimizations - T·ªëi ∆∞u cho list l·ªõn
            removeClippedSubviews={true}
            initialNumToRender={4} // Gi·∫£m xu·ªëng 4 ƒë·ªÉ tƒÉng performance
            maxToRenderPerBatch={2} // Gi·∫£m xu·ªëng 2
            windowSize={6} // Gi·∫£m xu·ªëng 6
            updateCellsBatchingPeriod={200} // TƒÉng l√™n 200ms ƒë·ªÉ gi·∫£m t·∫ßn su·∫•t update
            getItemLayout={undefined} // T·∫Øt getItemLayout ƒë·ªÉ tr√°nh conflict
            legacyImplementation={false}
            disableVirtualization={false} // ƒê·∫£m b·∫£o virtualization ƒë∆∞·ª£c b·∫≠t

            // Scroll optimization - C·∫£i ti·∫øn
            onContentSizeChange={(contentWidth, contentHeight) => {
              // Ch·ªâ auto scroll khi shouldScrollToEnd = true
              if (shouldScrollToEnd) {
                // S·ª≠ d·ª•ng requestAnimationFrame ƒë·ªÉ ƒë·∫£m b·∫£o layout ƒë√£ ho√†n th√†nh
                requestAnimationFrame(() => {
                  if (flatListRef.current) {
                    flatListRef.current.scrollToEnd({ animated: true });
                  }
                });
              }
            }}
            onLayout={(event) => {
              // Scroll to end khi component ƒë∆∞·ª£c layout l·∫ßn ƒë·∫ßu
              if (shouldScrollToEnd) {
                const { height } = event.nativeEvent.layout;
                if (height > 0) { // ƒê·∫£m b·∫£o layout ƒë√£ c√≥ k√≠ch th∆∞·ªõc
                  setTimeout(() => {
                    flatListRef.current?.scrollToEnd({ animated: false });
                  }, 100);
                }
              }
            }}
          />

          {/* Scroll to Bottom Button */}
          {!shouldScrollToEnd && (
            <TouchableOpacity
              style={styles.scrollToBottomButton}
              onPress={scrollToEnd}
              activeOpacity={0.7}
            >
              <IconButton
                icon="chevron-down"
                size={24}
                iconColor={theme.colors.accent}
                style={styles.scrollIcon}
              />
            </TouchableOpacity>
          )}
        </View>

        {/* Bottom Input Container - C·ªë ƒë·ªãnh ·ªü d∆∞·ªõi, kh√¥ng b·ªã KeyboardAvoidingView ·∫£nh h∆∞·ªüng */}
        <KeyboardAvoidingView
          behavior={Platform.OS === 'ios' ? 'padding' : 'height'}
          keyboardVerticalOffset={Platform.OS === "ios" ? 0 : 0}
        >
          <View style={styles.bottomInputContainer}>
            {/* Image Preview */}
            <ImagePreview
              imageUri={pickedImage}
              onRemove={() => setPickedImage(null)}
            />

            {/* Chat Input */}
            <ChatInput
              inputText={inputText}
              onChangeText={setInputText}
              isLoading={isLoading}
              // isRecording={isRecording}
              onOpenCamera={openCamera}
              onPickImage={pickImage}
              // onStartRecording={startRecording}
              // onStopRecording={stopRecording}
              onSendMessage={handleSendMessage}
              theme={theme}
              canSend={canSendMessage}
            />
          </View>
        </KeyboardAvoidingView>
      </SafeAreaView>
    </PaperProvider>
  );
};

const styles = StyleSheet.create({
  container: {
    flex: 1,
    backgroundColor: '#FFFEF7' // V√†ng r·∫•t nh·∫°t, s√°ng h∆°n
  },
  mainContainer: {
    flex: 1,
  },
  chatMessages: {
    flex: 1,
    paddingHorizontal: scale(10)
  },
  bottomInputContainer: {
    backgroundColor: '#FFFEF7',
  },
  scrollToBottomButton: {
    position: 'absolute',
    right: scale(20),
    bottom: 0, // S√°t lu√¥n v·ªõi thanh input
    backgroundColor: 'white',
    borderRadius: 25,
    elevation: 5,
    shadowColor: '#000',
    shadowOffset: {
      width: 0,
      height: 2,
    },
    shadowOpacity: 0.25,
    shadowRadius: 3.84,
    zIndex: 1000, // ƒê·∫£m b·∫£o n√∫t lu√¥n hi·ªán tr√™n c√πng
  },
  scrollIcon: {
    margin: 0,
  },
});

export default App;
